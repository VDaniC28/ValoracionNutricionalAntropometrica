import streamlit as st
import numpy as np
import pandas as pd
import joblib
from fpdf import FPDF
import base64
from io import BytesIO
import matplotlib.pyplot as plt
import seaborn as sns
import time
import os
from datetime import datetime
from sklearn.metrics import matthews_corrcoef

# --- Language Configuration ---
LANGUAGES = {
    "es": {
        "label": "Espa√±ol",
        "navigation_sidebar_title": "Navegaci√≥n",
        "page_title": "Valoraci√≥n Nutricional Antropom√©trica Multi-Modelo",
        "app_title": "üçé Valoraci√≥n Nutricional Antropom√©trica con IA Multi-Modelo",
        "app_description": """
Esta aplicaci√≥n utiliza **tres modelos de Machine Learning** para predecir la valoraci√≥n nutricional antropom√©trica:
- **XGBoost** (Gradient Boosting)
- **Regresi√≥n Lineal** (Linear Regression)
- **Random Forest** (Bosques Aleatorios)
""",
        "model_loaded_success": "Modelo {} cargado exitosamente.",
        "model_file_not_found": "Error: Archivos del modelo {} no encontrados en {}",
        "model_load_error": "Error al cargar modelo {}: {}",
        "no_models_loaded": "No hay modelos cargados.",
        "sex_input_error": "El sexo '{}' no es v√°lido para el modelo {}",
        "no_models_available": "No hay modelos disponibles.",
        "enter_patient_data": "üìã Ingresar Datos para Valoraci√≥n Nutricional",
        "patient_data": "Datos del Paciente",
        "name_label": "Nombre:",
        "last_name_label": "Apellidos:",
        "sex_label": "Sexo:",
        "male_short": "H", # Hombre
        "female_short": "M", # Mujer
        "weight_label": "Peso (kg):",
        "height_label": "Talla (m):",
        "age_label": "Edad (meses):",
        "submit_button": "Realizar Valoraci√≥n con Todos los Modelos",
        "name_lastname_required_error": "Por favor, ingresa el nombre y apellidos del paciente.",
        "prediction_in_progress": "Realizando valoraci√≥n nutricional con todos los modelos...",
        "prediction_complete_success": "¬°Valoraci√≥n completada con todos los modelos!",
        "patient_data_section": "üìä Datos del Paciente",
        "full_name_metric": "Nombre Completo",
        "sex_metric": "Sexo",
        "weight_metric": "Peso",
        "height_metric": "Talla",
        "age_metric": "Edad",
        "imc_metric": "IMC",
        "results_section": "üî¨ Resultados - {}",
        "height_age_val": "Valoraci√≥n Talla-Edad:",
        "imc_height_val": "Valoraci√≥n IMC-Talla:",
        "precision_metric": "Precisi√≥n",
        "accuracy_metric": "Exactitud",
        "recall_metric": "Recall",
        "f1_score_metric": "F1-Score",
        "auc_roc_metric": "AUC-ROC",
        "confidence_metric": "Confianza",
        "matthews_corrcoef_metric": "Coeficiente de Matthews (MCC):",
        "height_prob_chart_title": "Probabilidades Talla-Edad - {}",
        "imc_prob_chart_title": "Probabilidades IMC-Talla - {}",
        "category_label": "Categor√≠a",
        "probability_label": "Probabilidad",
        "generate_report_section": "üìÑ Generar Reporte Completo",
        "generate_pdf_button": "Generar Reporte PDF Multi-Modelo",
        "pdf_generated_success": "¬°Reporte PDF multi-modelo generado exitosamente! Haz clic en el enlace para descargar.",
        "download_pdf_link": "üìÑ Descargar Reporte PDF Multi-Modelo",
        "pdf_report_title": "REPORTE DE VALORACI√ìN NUTRICIONAL ANTROPOM√âTRICA",
        "pdf_report_subtitle": "AN√ÅLISIS MULTI-MODELO CON INTELIGENCIA ARTIFICIAL",
        "pdf_patient_data_title": "DATOS DEL PACIENTE",
        "pdf_name": "Nombre:",
        "pdf_sex": "Sexo:",
        "pdf_weight": "Peso:",
        "pdf_height": "Talla:",
        "pdf_age": "Edad:",
        "pdf_imc_calc": "IMC Calculado:",
        "pdf_results_title": "RESULTADOS Y M√âTRICAS POR MODELO",
        "pdf_best_model_suffix": " (MEJOR MODELO)",
        "pdf_height_age_val_pdf": "Valoraci√≥n Talla-Edad:",
        "pdf_imc_height_val_pdf": "Valoraci√≥n IMC-Talla:",
        "pdf_precision_pdf": "Precisi√≥n:",
        "pdf_accuracy_pdf": "Exactitud:",
        "pdf_recall_pdf": "Recall:",
        "pdf_f1_score_pdf": "F1-Score:",
        "pdf_auc_roc_pdf": "AUC-ROC:",
        "pdf_confidence_pdf": "Confianza:",
        "pdf_mcc_pdf": "Coeficiente de Matthews (MCC):",
        "pdf_summary_title": "RESUMEN Y RECOMENDACI√ìN",
        "pdf_recommended_model": "Modelo recomendado:",
        "pdf_summary_text": "Basado en las m√©tricas de rendimiento, el modelo {} muestra el mejor desempe√±o para este caso particular. Se recomienda considerar estos resultados junto con la evaluaci√≥n cl√≠nica profesional.",
        "pdf_diagnosis_date": "Fecha del diagn√≥stico:",
        "pdf_page_label": "P√°gina",
        "pdf_confusion_matrices_title": "MATRICES DE CONFUSI√ìN POR MODELO",
        "pdf_model_label": "Modelo:",
        "pdf_image_not_found": "[Imagen no encontrada para el modelo {}]",
        "pdf_statistical_methods_title": "M√âTODOS ESTAD√çSTICOS - {}",
        "pdf_image_not_found_path": "[Imagen no encontrada: {}]",
        "xgboost_precision_recall_imc_talla": "Curvas Precision-Recall Modelo IMC-Talla",
        "xgboost_precision_recall_talla_edad": "Curvas Precision-Recall Modelo Talla-Edad",
        "xgboost_roc_imc_talla": "Curvas ROC Modelo IMC-Talla",
        "xgboost_roc_talla_edad": "Curvas ROC Modelo Talla-Edad",
        "xgboost_calibration_imc_talla": "Gr√°fico Calibraci√≥n IMC-Talla",
        "xgboost_calibration_talla_edad": "Gr√°fico Calibraci√≥n Talla-Edad",
        "linear_precision_recall_imc_talla": "Curvas Precision-Recall Modelo IMC-Talla",
        "linear_precision_recall_talla_edad": "Curvas Precision-Recall Modelo Talla-Edad",
        "linear_roc_imc_talla": "Curvas ROC Modelo IMC-Talla",
        "linear_roc_talla_edad": "Curvas ROC Modelo Talla-Edad",
        "linear_calibration_imc_talla": "Gr√°fico Calibraci√≥n IMC-Talla",
        "linear_calibration_talla_edad": "Gr√°fico Calibraci√≥n Talla-Edad",
        "random_precision_recall_imc_talla": "Curvas Precision-Recall Modelo IMC-Talla",
        "random_precision_recall_talla_edad": "Curvas Precision-Recall Modelo Talla-Edad",
        "random_roc_imc_talla": "Curvas ROC Modelo IMC-Talla",
        "random_roc_talla_edad": "Curvas ROC Modelo Talla-Edad",
        "random_calibration_imc_talla": "Gr√°fico Calibraci√≥n IMC-Talla",
        "random_calibration_talla_edad": "Gr√°fico Calibraci√≥n Talla-Edad",
        "about_project_title": "üî¨ Acerca del Proyecto",
        "about_project_heading": "## Valoraci√≥n Nutricional Antropom√©trica Multi-Modelo",
        "about_project_intro": """
Esta aplicaci√≥n avanzada utiliza **tres modelos de Machine Learning** diferentes para proporcionar 
una valoraci√≥n nutricional antropom√©trica completa y confiable:
""",
        "about_models_heading": "### ü§ñ Modelos Implementados:",
        "about_xgboost_title": "1. XGBoost (Extreme Gradient Boosting)",
        "about_xgboost_desc": """
- Modelo ensemble de alto rendimiento
- Excelente para datos estructurados
- Manejo autom√°tico de valores faltantes
""",
        "about_linear_regression_title": "2. Regresi√≥n Lineal (Linear Regression)",
        "about_linear_regression_desc": """
- Modelo interpretable y r√°pido
- Relaciones lineales entre variables
- Base s√≥lida para comparaci√≥n
""",
        "about_random_forest_title": "3. Random Forest (Bosques Aleatorios)",
        "about_random_forest_desc": """
- Ensemble de √°rboles de decisi√≥n
- Robusto contra overfitting
- Buena generalizaci√≥n
""",
        "about_features_heading": "### üìä Caracter√≠sticas Principales:",
        "about_features_list": """
- **An√°lisis Comparativo:** Evaluaci√≥n simult√°nea con los tres modelos
- **M√©tricas Avanzadas:** Precisi√≥n, exactitud, recall, F1-score, AUC-ROC y nivel de confianza
- **Reporte Profesional:** PDF detallado con an√°lisis comparativo
- **Identificaci√≥n del Mejor Modelo:** Recomendaci√≥n autom√°tica basada en m√©tricas
- **Visualizaciones Interactivas:** Gr√°ficos de probabilidades por modelo
""",
        "about_clinical_application_heading": "### üè• Aplicaci√≥n Cl√≠nica:",
        "about_clinical_application_list": """
- Evaluaci√≥n de **Talla para la Edad**
- Evaluaci√≥n de **IMC para la Talla**
- Datos del paciente completos
- Fecha y hora del diagn√≥stico
""",
        "about_technologies_heading": "### üõ†Ô∏è Tecnolog√≠as Utilizadas:",
        "about_technologies_list": """
- **Python** - Lenguaje principal
- **Streamlit** - Interfaz web interactiva
- **XGBoost, Scikit-learn** - Modelos de ML
- **Matplotlib, Seaborn** - Visualizaciones
- **FPDF** - Generaci√≥n de reportes PDF
- **Joblib** - Serializaci√≥n de modelos
""",
        "about_quality_assurance_heading": "### üìà Garant√≠a de Calidad:",
        "about_quality_assurance_list": """
- Todos los modelos mantienen m√©tricas superiores al 80%
- Comparaci√≥n objetiva entre algoritmos
- Recomendaci√≥n autom√°tica del mejor modelo
- Interfaz intuitiva y profesional
""",
        "model_status_heading": "üìç Estado de los Modelos",
        "model_status_operational": "‚úÖ {}: Operativo",
        "model_status_unavailable": "‚ùå {}: No disponible",
        "navigation_sidebar_title": "üß≠ Navegaci√≥n",
        "navigation_section_select": "Selecciona una secci√≥n:",
        "nutrition_diagnosis_nav": "üî¨ Valoraci√≥n Nutricional",
        "about_project_nav": "üìñ Acerca del Proyecto",
        "available_models_sidebar": "### üìä Modelos Disponibles"
    },
    "en": {
        "label": "English",
        "navigation_sidebar_title": "Navigation",
        "page_title": "Multi-Model Anthropometric Nutritional Assessment",
        "app_title": "üçé Multi-Model Anthropometric Nutritional Assessment with AI",
        "app_description": """
This application uses **three Machine Learning models** to predict anthropometric nutritional assessment:
- **XGBoost** (Gradient Boosting)
- **Linear Regression**
- **Random Forest**
""",
        "model_loaded_success": "Model {} loaded successfully.",
        "model_file_not_found": "Error: Model files for {} not found in {}",
        "model_load_error": "Error loading model {}: {}",
        "no_models_loaded": "No models loaded.",
        "sex_input_error": "Sex '{}' is not valid for model {}",
        "no_models_available": "No models available.",
        "enter_patient_data": "üìã Enter Data for Nutritional Assessment",
        "patient_data": "Patient Data",
        "name_label": "First Name:",
        "last_name_label": "Last Name:",
        "sex_label": "Sex:",
        "male_short": "M", # Male
        "female_short": "F", # Female
        "weight_label": "Weight (kg):",
        "height_label": "Height (m):",
        "age_label": "Age (months):",
        "submit_button": "Perform Assessment with All Models",
        "name_lastname_required_error": "Please enter the patient's first and last name.",
        "prediction_in_progress": "Performing nutritional assessment with all models...",
        "prediction_complete_success": "Assessment completed with all models!",
        "patient_data_section": "üìä Patient Data",
        "full_name_metric": "Full Name",
        "sex_metric": "Sex",
        "weight_metric": "Weight",
        "height_metric": "Height",
        "age_metric": "Age",
        "imc_metric": "BMI",
        "results_section": "üî¨ Results - {}",
        "height_age_val": "Height-for-Age Assessment:",
        "imc_height_val": "BMI-for-Height Assessment:",
        "precision_metric": "Precision",
        "accuracy_metric": "Accuracy",
        "recall_metric": "Recall",
        "f1_score_metric": "F1-Score",
        "auc_roc_metric": "AUC-ROC",
        "confidence_metric": "Confidence",
        "matthews_corrcoef_metric": "Matthews Correlation Coefficient (MCC):",
        "height_prob_chart_title": "Height-for-Age Probabilities - {}",
        "imc_prob_chart_title": "BMI-for-Height Probabilities - {}",
        "category_label": "Category",
        "probability_label": "Probability",
        "generate_report_section": "üìÑ Generate Full Report",
        "generate_pdf_button": "Generate Multi-Model PDF Report",
        "pdf_generated_success": "Multi-model PDF report generated successfully! Click the link to download.",
        "download_pdf_link": "üìÑ Download Multi-Model PDF Report",
        "pdf_report_title": "ANTHROPOMETRIC NUTRITIONAL ASSESSMENT REPORT",
        "pdf_report_subtitle": "MULTI-MODEL ANALYSIS WITH ARTIFICIAL INTELLIGENCE",
        "pdf_patient_data_title": "PATIENT DATA",
        "pdf_name": "Name:",
        "pdf_sex": "Sex:",
        "pdf_weight": "Weight:",
        "pdf_height": "Height:",
        "pdf_age": "Age:",
        "pdf_imc_calc": "Calculated BMI:",
        "pdf_results_title": "RESULTS AND METRICS BY MODEL",
        "pdf_best_model_suffix": " (BEST MODEL)",
        "pdf_height_age_val_pdf": "Height-for-Age Assessment:",
        "pdf_imc_height_val_pdf": "BMI-for-Height Assessment:",
        "pdf_precision_pdf": "Precision:",
        "pdf_accuracy_pdf": "Accuracy:",
        "pdf_recall_pdf": "Recall:",
        "pdf_f1_score_pdf": "F1-Score:",
        "pdf_auc_roc_pdf": "AUC-ROC:",
        "pdf_confidence_pdf": "Confidence:",
        "pdf_mcc_pdf": "Matthews Correlation Coefficient (MCC):",
        "pdf_summary_title": "SUMMARY AND RECOMMENDATION",
        "pdf_recommended_model": "Recommended Model:",
        "pdf_summary_text": "Based on performance metrics, the {} model shows the best performance for this particular case. It is recommended to consider these results along with professional clinical evaluation.",
        "pdf_diagnosis_date": "Diagnosis date:",
        "pdf_page_label": "Page",
        "pdf_confusion_matrices_title": "CONFUSION MATRICES BY MODEL",
        "pdf_model_label": "Model:",
        "pdf_image_not_found": "[Image not found for model {}]",
        "pdf_statistical_methods_title": "STATISTICAL METHODS - {}",
        "pdf_image_not_found_path": "[Image not found: {}]",
        "xgboost_precision_recall_imc_talla": "Precision-Recall Curves BMI-for-Height Model",
        "xgboost_precision_recall_talla_edad": "Precision-Recall Curves Height-for-Age Model",
        "xgboost_roc_imc_talla": "ROC Curves BMI-for-Height Model",
        "xgboost_roc_talla_edad": "ROC Curves Height-for-Age Model",
        "xgboost_calibration_imc_talla": "Calibration Plot BMI-for-Height",
        "xgboost_calibration_talla_edad": "Calibration Plot Height-for-Age",
        "linear_precision_recall_imc_talla": "Precision-Recall Curves BMI-for-Height Model",
        "linear_precision_recall_talla_edad": "Precision-Recall Curves Height-for-Age Model",
        "linear_roc_imc_talla": "ROC Curves BMI-for-Height Model",
        "linear_roc_talla_edad": "ROC Curves Height-for-Age Model",
        "linear_calibration_imc_talla": "Calibration Plot BMI-for-Height",
        "linear_calibration_talla_edad": "Calibration Plot Height-for-Age",
        "random_precision_recall_imc_talla": "Precision-Recall Curves BMI-for-Height Model",
        "random_precision_recall_talla_edad": "Precision-Recall Curves Height-for-Age Model",
        "random_roc_imc_talla": "ROC Curves BMI-for-Height Model",
        "random_roc_talla_edad": "ROC Curves Height-for-Age Model",
        "random_calibration_imc_talla": "Calibration Plot BMI-for-Height",
        "random_calibration_talla_edad": "Calibration Plot Height-for-Age",
        "about_project_title": "üî¨ About the Project",
        "about_project_heading": "## Multi-Model Anthropometric Nutritional Assessment",
        "about_project_intro": """
This advanced application uses **three different Machine Learning models** to provide a 
complete and reliable anthropometric nutritional assessment:
""",
        "about_models_heading": "### ü§ñ Implemented Models:",
        "about_xgboost_title": "1. XGBoost (Extreme Gradient Boosting)",
        "about_xgboost_desc": """
- High-performance ensemble model
- Excellent for structured data
- Automatic handling of missing values
""",
        "about_linear_regression_title": "2. Linear Regression",
        "about_linear_regression_desc": """
- Interpretable and fast model
- Linear relationships between variables
- Solid base for comparison
""",
        "about_random_forest_title": "3. Random Forest",
        "about_random_forest_desc": """
- Ensemble of decision trees
- Robust against overfitting
- Good generalization
""",
        "about_features_heading": "### üìä Key Features:",
        "about_features_list": """
- **Comparative Analysis:** Simultaneous evaluation with all three models
- **Advanced Metrics:** Precision, accuracy, recall, F1-score, AUC-ROC, and confidence level
- **Professional Report:** Detailed PDF with comparative analysis
- **Best Model Identification:** Automatic recommendation based on metrics
- **Interactive Visualizations:** Probability charts per model
""",
        "about_clinical_application_heading": "### üè• Clinical Application:",
        "about_clinical_application_list": """
- **Height-for-Age** evaluation
- **BMI-for-Height** evaluation
- Complete patient data
- Date and time of diagnosis
""",
        "about_technologies_heading": "### üõ†Ô∏è Technologies Used:",
        "about_technologies_list": """
- **Python** - Main language
- **Streamlit** - Interactive web interface
- **XGBoost, Scikit-learn** - ML Models
- **Matplotlib, Seaborn** - Visualizations
- **FPDF** - PDF report generation
- **Joblib** - Model serialization
""",
        "about_quality_assurance_heading": "### üìà Quality Assurance:",
        "about_quality_assurance_list": """
- All models maintain metrics above 80%
- Objective comparison between algorithms
- Automatic recommendation of the best model
- Intuitive and professional interface
""",
        "model_status_heading": "üìç Model Status",
        "model_status_operational": "‚úÖ {}: Operational",
        "model_status_unavailable": "‚ùå {}: Unavailable",
        "navigation_sidebar_title": "üß≠ Navigation",
        "navigation_section_select": "Select a section:",
        "nutrition_diagnosis_nav": "üî¨ Nutritional Assessment",
        "about_project_nav": "üìñ About the Project",
        "available_models_sidebar": "### üìä Available Models"
    },

    "zh": {
        "label": "‰∏≠Êñá", # Chino
        "navigation_sidebar_title": "ÂØºËà™",
        "page_title": "Â§öÊ®°Âûã‰∫∫‰ΩìÊµãÈáèËê•ÂÖªËØÑ‰º∞",
        "app_title": "üçé ÈááÁî®AIÂ§öÊ®°ÂûãÁöÑ‰∫∫‰ΩìÊµãÈáèËê•ÂÖªËØÑ‰º∞",
        "app_description": """
Ê≠§Â∫îÁî®Á®ãÂ∫è‰ΩøÁî®**‰∏â‰∏™Êú∫Âô®Â≠¶‰π†Ê®°Âûã**Êù•È¢ÑÊµã‰∫∫‰ΩìÊµãÈáèËê•ÂÖªËØÑ‰º∞Ôºö
- **XGBoost** (Ê¢ØÂ∫¶ÊèêÂçá)
- **Á∫øÊÄßÂõûÂΩí** (Linear Regression)
- **ÈöèÊú∫Ê£ÆÊûó** (Random Forest)
""",
        "model_loaded_success": "Ê®°Âûã {} Âä†ËΩΩÊàêÂäü„ÄÇ",
        "model_file_not_found": "ÈîôËØØÔºöÊ®°Âûã {} Êñá‰ª∂Êú™Âú® {} ‰∏≠ÊâæÂà∞",
        "model_load_error": "Âä†ËΩΩÊ®°Âûã {} Êó∂Âá∫ÈîôÔºö{}",
        "no_models_loaded": "Êú™Âä†ËΩΩ‰ªª‰ΩïÊ®°Âûã„ÄÇ",
        "sex_input_error": "ÊÄßÂà´ '{}' ÂØπÊ®°Âûã {} Êó†Êïà",
        "no_models_available": "Ê≤°ÊúâÂèØÁî®ÁöÑÊ®°Âûã„ÄÇ",
        "enter_patient_data": "üìã ËæìÂÖ•Ëê•ÂÖªËØÑ‰º∞Êï∞ÊçÆ",
        "patient_data": "ÊÇ£ËÄÖÊï∞ÊçÆ",
        "name_label": "ÂêçÂ≠ó:",
        "last_name_label": "ÂßìÊ∞è:",
        "sex_label": "ÊÄßÂà´:",
        "male_short": "Áî∑", # Áî∑
        "female_short": "Â•≥", # Â•≥
        "weight_label": "‰ΩìÈáç (kg):",
        "height_label": "Ë∫´È´ò (m):",
        "age_label": "Âπ¥ÈæÑ (Êúà):",
        "submit_button": "‰ΩøÁî®ÊâÄÊúâÊ®°ÂûãËøõË°åËØÑ‰º∞",
        "name_lastname_required_error": "ËØ∑ËæìÂÖ•ÊÇ£ËÄÖÁöÑÂêçÂ≠óÂíåÂßìÊ∞è„ÄÇ",
        "prediction_in_progress": "Ê≠£Âú®‰ΩøÁî®ÊâÄÊúâÊ®°ÂûãËøõË°åËê•ÂÖªËØÑ‰º∞...",
        "prediction_complete_success": "Â∑≤‰ΩøÁî®ÊâÄÊúâÊ®°ÂûãÂÆåÊàêËØÑ‰º∞ÔºÅ",
        "patient_data_section": "üìä ÊÇ£ËÄÖÊï∞ÊçÆ",
        "full_name_metric": "ÂÖ®Âêç",
        "sex_metric": "ÊÄßÂà´",
        "weight_metric": "‰ΩìÈáç",
        "height_metric": "Ë∫´È´ò",
        "age_metric": "Âπ¥ÈæÑ",
        "imc_metric": "BMI",
        "results_section": "üî¨ ÁªìÊûú - {}",
        "height_age_val": "Ë∫´È´ò-Âπ¥ÈæÑËØÑ‰º∞:",
        "imc_height_val": "BMI-Ë∫´È´òËØÑ‰º∞:",
        "precision_metric": "Á≤æÁ°ÆÂ∫¶",
        "accuracy_metric": "ÂáÜÁ°ÆÂ∫¶",
        "recall_metric": "Âè¨ÂõûÁéá",
        "f1_score_metric": "F1-ÂàÜÊï∞",
        "auc_roc_metric": "AUC-ROC",
        "confidence_metric": "ÁΩÆ‰ø°Â∫¶",
        "matthews_corrcoef_metric": "È©¨‰øÆÊñØÁõ∏ÂÖ≥Á≥ªÊï∞ (MCC):",
        "height_prob_chart_title": "Ë∫´È´ò-Âπ¥ÈæÑÊ¶ÇÁéá - {}",
        "imc_prob_chart_title": "BMI-Ë∫´È´òÊ¶ÇÁéá - {}",
        "category_label": "Á±ªÂà´",
        "probability_label": "Ê¶ÇÁéá",
        "generate_report_section": "üìÑ ÁîüÊàêÂÆåÊï¥Êä•Âëä",
        "generate_pdf_button": "ÁîüÊàêÂ§öÊ®°ÂûãPDFÊä•Âëä",
        "pdf_generated_success": "Â§öÊ®°ÂûãPDFÊä•ÂëäÂ∑≤ÊàêÂäüÁîüÊàêÔºÅÁÇπÂáªÈìæÊé•‰∏ãËΩΩ„ÄÇ",
        "download_pdf_link": "üìÑ ‰∏ãËΩΩÂ§öÊ®°ÂûãPDFÊä•Âëä",
        "pdf_report_title": "‰∫∫‰ΩìÊµãÈáèËê•ÂÖªËØÑ‰º∞Êä•Âëä",
        "pdf_report_subtitle": "‰∫∫Â∑•Êô∫ËÉΩÂ§öÊ®°ÂûãÂàÜÊûê",
        "pdf_patient_data_title": "ÊÇ£ËÄÖÊï∞ÊçÆ",
        "pdf_name": "ÂêçÂ≠ó:",
        "pdf_sex": "ÊÄßÂà´:",
        "pdf_weight": "‰ΩìÈáç:",
        "pdf_height": "Ë∫´È´ò:",
        "pdf_age": "Âπ¥ÈæÑ:",
        "pdf_imc_calc": "ËÆ°ÁÆóÁöÑBMI:",
        "pdf_results_title": "Ê®°ÂûãÁªìÊûúÂíåÊåáÊ†á",
        "pdf_best_model_suffix": " (ÊúÄ‰Ω≥Ê®°Âûã)",
        "pdf_height_age_val_pdf": "Ë∫´È´ò-Âπ¥ÈæÑËØÑ‰º∞:",
        "pdf_imc_height_val_pdf": "BMI-Ë∫´È´òËØÑ‰º∞:",
        "pdf_precision_pdf": "Á≤æÁ°ÆÂ∫¶:",
        "pdf_accuracy_pdf": "ÂáÜÁ°ÆÂ∫¶:",
        "pdf_recall_pdf": "Âè¨ÂõûÁéá:",
        "pdf_f1_score_pdf": "F1-ÂàÜÊï∞:",
        "pdf_auc_roc_pdf": "AUC-ROC:",
        "pdf_confidence_pdf": "ÁΩÆ‰ø°Â∫¶:",
        "pdf_mcc_pdf": "È©¨‰øÆÊñØÁõ∏ÂÖ≥Á≥ªÊï∞ (MCC):",
        "pdf_summary_title": "ÊëòË¶ÅÂíåÂª∫ËÆÆ",
        "pdf_recommended_model": "Êé®ËçêÊ®°Âûã:",
        "pdf_summary_text": "Ê†πÊçÆÊÄßËÉΩÊåáÊ†áÔºåÊ®°Âûã {} Âú®Ê≠§ÁâπÂÆöÊ°à‰æã‰∏≠Ë°®Áé∞ÊúÄ‰Ω≥„ÄÇÂª∫ËÆÆÁªìÂêà‰∏ì‰∏ö‰∏¥Â∫äËØÑ‰º∞ËÄÉËôëËøô‰∫õÁªìÊûú„ÄÇ",
        "pdf_diagnosis_date": "ËØäÊñ≠Êó•Êúü:",
        "pdf_page_label": "È°µ",
        "pdf_confusion_matrices_title": "ÊåâÊ®°ÂûãÂàíÂàÜÁöÑÊ∑∑Ê∑ÜÁü©Èòµ",
        "pdf_model_label": "Ê®°Âûã:",
        "pdf_image_not_found": "[Êú™ÊâæÂà∞Ê®°Âûã {} ÁöÑÂõæÂÉè]",
        "pdf_statistical_methods_title": "ÁªüËÆ°ÊñπÊ≥ï - {}",
        "pdf_image_not_found_path": "[ÂõæÁâáÊú™ÊâæÂà∞: {}]",
        "xgboost_precision_recall_imc_talla": "BMI-Ë∫´È´òÊ®°ÂûãÁ≤æÁ°ÆÂ∫¶-Âè¨ÂõûÁéáÊõ≤Á∫ø",
        "xgboost_precision_recall_talla_edad": "Ë∫´È´ò-Âπ¥ÈæÑÊ®°ÂûãÁ≤æÁ°ÆÂ∫¶-Âè¨ÂõûÁéáÊõ≤Á∫ø",
        "xgboost_roc_imc_talla": "BMI-Ë∫´È´òÊ®°ÂûãROCÊõ≤Á∫ø",
        "xgboost_roc_talla_edad": "Ë∫´È´ò-Âπ¥ÈæÑÊ®°ÂûãROCÊõ≤Á∫ø",
        "xgboost_calibration_imc_talla": "BMI-Ë∫´È´òÊ†°ÂáÜÂõæ",
        "xgboost_calibration_talla_edad": "Ë∫´È´ò-Âπ¥ÈæÑÊ†°ÂáÜÂõæ",
        "linear_precision_recall_imc_talla": "BMI-Ë∫´È´òÊ®°ÂûãÁ≤æÁ°ÆÂ∫¶-Âè¨ÂõûÁéáÊõ≤Á∫ø",
        "linear_precision_recall_talla_edad": "Ë∫´È´ò-Âπ¥ÈæÑÊ®°ÂûãÁ≤æÁ°ÆÂ∫¶-Âè¨ÂõûÁéáÊõ≤Á∫ø",
        "linear_roc_imc_talla": "BMI-Ë∫´È´òÊ®°ÂûãROCÊõ≤Á∫ø",
        "linear_roc_talla_edad": "Ë∫´È´ò-Âπ¥ÈæÑÊ®°ÂûãROCÊõ≤Á∫ø",
        "linear_calibration_imc_talla": "BMI-Ë∫´È´òÊ†°ÂáÜÂõæ",
        "linear_calibration_talla_edad": "Ë∫´È´ò-Âπ¥ÈæÑÊ†°ÂáÜÂõæ",
        "random_precision_recall_imc_talla": "BMI-Ë∫´È´òÊ®°ÂûãÁ≤æÁ°ÆÂ∫¶-Âè¨ÂõûÁéáÊõ≤Á∫ø",
        "random_precision_recall_talla_edad": "Ë∫´È´ò-Âπ¥ÈæÑÊ®°ÂûãÁ≤æÁ°ÆÂ∫¶-Âè¨ÂõûÁéáÊõ≤Á∫ø",
        "random_roc_imc_talla": "BMI-Ë∫´È´òÊ®°ÂûãROCÊõ≤Á∫ø",
        "random_roc_talla_edad": "Ë∫´È´ò-Âπ¥ÈæÑÊ®°ÂûãROCÊõ≤Á∫ø",
        "random_calibration_imc_talla": "BMI-Ë∫´È´òÊ†°ÂáÜÂõæ",
        "random_calibration_talla_edad": "Ë∫´È´ò-Âπ¥ÈæÑÊ†°ÂáÜÂõæ",
        "about_project_title": "üî¨ ÂÖ≥‰∫éÈ°πÁõÆ",
        "about_project_heading": "## Â§öÊ®°Âûã‰∫∫‰ΩìÊµãÈáèËê•ÂÖªËØÑ‰º∞",
        "about_project_intro": """
Ê≠§È´òÁ∫ßÂ∫îÁî®Á®ãÂ∫è‰ΩøÁî®**‰∏âÁßç‰∏çÂêåÁöÑÊú∫Âô®Â≠¶‰π†Ê®°Âûã**Êèê‰æõÂÖ®Èù¢ÂèØÈù†ÁöÑ‰∫∫‰ΩìÊµãÈáèËê•ÂÖªËØÑ‰º∞Ôºö
""",
        "about_models_heading": "### ü§ñ Â∑≤ÂÆûÁé∞Ê®°ÂûãÔºö",
        "about_xgboost_title": "1. XGBoost (ÊûÅÁ´ØÊ¢ØÂ∫¶ÊèêÂçá)",
        "about_xgboost_desc": """
- È´òÊÄßËÉΩÈõÜÊàêÊ®°Âûã
- ÈÄÇÁî®‰∫éÁªìÊûÑÂåñÊï∞ÊçÆ
- Ëá™Âä®Â§ÑÁêÜÁº∫Â§±ÂÄº
""",
        "about_linear_regression_title": "2. Á∫øÊÄßÂõûÂΩí",
        "about_linear_regression_desc": """
- ÂèØËß£Èáä‰∏îÂø´ÈÄüÁöÑÊ®°Âûã
- ÂèòÈáè‰πãÈó¥ÁöÑÁ∫øÊÄßÂÖ≥Á≥ª
- ÂùöÂÆûÁöÑÊØîËæÉÂü∫Á°Ä
""",
        "about_random_forest_title": "3. ÈöèÊú∫Ê£ÆÊûó",
        "about_random_forest_desc": """
- ÂÜ≥Á≠ñÊ†ëÈõÜÊàê
- ÂØπËøáÊãüÂêàÂÖ∑ÊúâÈ≤ÅÊ£íÊÄß
- ËâØÂ•ΩÁöÑÊ≥õÂåñËÉΩÂäõ
""",
        "about_features_heading": "### üìä ‰∏ªË¶ÅÁâπÁÇπÔºö",
        "about_features_list": """
- **ÊØîËæÉÂàÜÊûêÔºö** ‰ΩøÁî®ÊâÄÊúâ‰∏â‰∏™Ê®°ÂûãÂêåÊó∂ËØÑ‰º∞
- **È´òÁ∫ßÊåáÊ†áÔºö** Á≤æÁ°ÆÂ∫¶„ÄÅÂáÜÁ°ÆÂ∫¶„ÄÅÂè¨ÂõûÁéá„ÄÅF1-ÂàÜÊï∞„ÄÅAUC-ROC ÂíåÁΩÆ‰ø°Â∫¶
- **‰∏ì‰∏öÊä•ÂëäÔºö** ÂåÖÂê´ÊØîËæÉÂàÜÊûêÁöÑËØ¶ÁªÜPDF
- **ÊúÄ‰Ω≥Ê®°ÂûãËØÜÂà´Ôºö** Âü∫‰∫éÊåáÊ†áËá™Âä®Êé®Ëçê
- **‰∫§‰∫íÂºèÂèØËßÜÂåñÔºö** ÊØè‰∏™Ê®°ÂûãÁöÑÊ¶ÇÁéáÂõæ
""",
        "about_clinical_application_heading": "### üè• ‰∏¥Â∫äÂ∫îÁî®Ôºö",
        "about_clinical_application_list": """
- **Ë∫´È´ò-Âπ¥ÈæÑ**ËØÑ‰º∞
- **BMI-Ë∫´È´ò**ËØÑ‰º∞
- ÂÆåÊï¥ÁöÑÊÇ£ËÄÖÊï∞ÊçÆ
- ËØäÊñ≠Êó•ÊúüÂíåÊó∂Èó¥
""",
        "about_technologies_heading": "### üõ†Ô∏è ‰ΩøÁî®ÁöÑÊäÄÊúØÔºö",
        "about_technologies_list": """
- **Python** - ‰∏ªË¶ÅËØ≠Ë®Ä
- **Streamlit** - ‰∫§‰∫íÂºèÁΩëÈ°µÁïåÈù¢
- **XGBoost, Scikit-learn** - Êú∫Âô®Â≠¶‰π†Ê®°Âûã
- **Matplotlib, Seaborn** - ÂèØËßÜÂåñ
- **FPDF** - PDFÊä•ÂëäÁîüÊàê
- **Joblib** - Ê®°ÂûãÂ∫èÂàóÂåñ
""",
        "about_quality_assurance_heading": "### üìà Ë¥®Èáè‰øùËØÅÔºö",
        "about_quality_assurance_list": """
- ÊâÄÊúâÊ®°ÂûãÊåáÊ†áÂùá‰øùÊåÅÂú®80%‰ª•‰∏ä
- ÁÆóÊ≥ï‰πãÈó¥ÁöÑÂÆ¢ËßÇÊØîËæÉ
- Ëá™Âä®Êé®ËçêÊúÄ‰Ω≥Ê®°Âûã
- Áõ¥ËßÇ‰∏ì‰∏öÁöÑÁïåÈù¢
""",
        "model_status_heading": "üìç Ê®°ÂûãÁä∂ÊÄÅ",
        "model_status_operational": "‚úÖ {}: ËøêË°å‰∏≠",
        "model_status_unavailable": "‚ùå {}: ‰∏çÂèØÁî®",
        "navigation_sidebar_title": "üß≠ ÂØºËà™",
        "navigation_section_select": "ÈÄâÊã©‰∏Ä‰∏™ÈÉ®ÂàÜÔºö",
        "nutrition_diagnosis_nav": "üî¨ Ëê•ÂÖªËØÑ‰º∞",
        "about_project_nav": "üìñ ÂÖ≥‰∫éÈ°πÁõÆ",
        "available_models_sidebar": "### üìä ÂèØÁî®Ê®°Âûã"
    },
    "de": {
        "label": "Deutsch", # Alem√°n
        "navigation_sidebar_title": "Navigation",
        "page_title": "Mehrmodell-Anthropometrische Ern√§hrungsbewertung",
        "app_title": "üçé Mehrmodell-Anthropometrische Ern√§hrungsbewertung mit KI",
        "app_description": """
Diese Anwendung verwendet **drei maschinelle Lernmodelle**, um die anthropometrische Ern√§hrungsbewertung vorherzusagen:
- **XGBoost** (Gradient Boosting)
- **Lineare Regression** (Linear Regression)
- **Random Forest** (Zufallswald)
""",
        "model_loaded_success": "Modell {} erfolgreich geladen.",
        "model_file_not_found": "Fehler: Modelldateien f√ºr {} nicht gefunden in {}",
        "model_load_error": "Fehler beim Laden von Modell {}: {}",
        "no_models_loaded": "Keine Modelle geladen.",
        "sex_input_error": "Geschlecht '{}' ist f√ºr Modell {} ung√ºltig",
        "no_models_available": "Keine Modelle verf√ºgbar.",
        "enter_patient_data": "üìã Daten zur Ern√§hrungsbewertung eingeben",
        "patient_data": "Patientendaten",
        "name_label": "Vorname:",
        "last_name_label": "Nachname:",
        "sex_label": "Geschlecht:",
        "male_short": "M", # M√§nnlich
        "female_short": "W", # Weiblich
        "weight_label": "Gewicht (kg):",
        "height_label": "Gr√∂√üe (m):",
        "age_label": "Alter (Monate):",
        "submit_button": "Bewertung mit allen Modellen durchf√ºhren",
        "name_lastname_required_error": "Bitte geben Sie den Vor- und Nachnamen des Patienten ein.",
        "prediction_in_progress": "Ern√§hrungsbewertung mit allen Modellen wird durchgef√ºhrt...",
        "prediction_complete_success": "Bewertung mit allen Modellen abgeschlossen!",
        "patient_data_section": "üìä Patientendaten",
        "full_name_metric": "Vollst√§ndiger Name",
        "sex_metric": "Geschlecht",
        "weight_metric": "Gewicht",
        "height_metric": "Gr√∂√üe",
        "age_metric": "Alter",
        "imc_metric": "BMI",
        "results_section": "üî¨ Ergebnisse - {}",
        "height_age_val": "Gr√∂√üe-f√ºr-Alter-Bewertung:",
        "imc_height_val": "BMI-f√ºr-Gr√∂√üe-Bewertung:",
        "precision_metric": "Pr√§zision",
        "accuracy_metric": "Genauigkeit",
        "recall_metric": "Recall",
        "f1_score_metric": "F1-Score",
        "auc_roc_metric": "AUC-ROC",
        "confidence_metric": "Konfidenz",
        "matthews_corrcoef_metric": "Matthews-Korrelationskoeffizient (MCC):",
        "height_prob_chart_title": "Gr√∂√üe-f√ºr-Alter-Wahrscheinlichkeiten - {}",
        "imc_prob_chart_title": "BMI-f√ºr-Gr√∂√üe-Wahrscheinlichkeiten - {}",
        "category_label": "Kategorie",
        "probability_label": "Wahrscheinlichkeit",
        "generate_report_section": "üìÑ Vollst√§ndigen Bericht generieren",
        "generate_pdf_button": "Mehrmodell-PDF-Bericht generieren",
        "pdf_generated_success": "Mehrmodell-PDF-Bericht erfolgreich generiert! Klicken Sie auf den Link zum Herunterladen.",
        "download_pdf_link": "üìÑ Mehrmodell-PDF-Bericht herunterladen",
        "pdf_report_title": "ANTHROPOMETRISCHER ERN√ÑHRUNGSBEWERTUNGSBERICHT",
        "pdf_report_subtitle": "MEHRMODELLANALYSE MIT K√úNSTLICHER INTELLIGENZ",
        "pdf_patient_data_title": "PATIENTENDATEN",
        "pdf_name": "Name:",
        "pdf_sex": "Geschlecht:",
        "pdf_weight": "Gewicht:",
        "pdf_height": "Gr√∂√üe:",
        "pdf_age": "Alter:",
        "pdf_imc_calc": "Berechneter BMI:",
        "pdf_results_title": "ERGEBNISSE UND METRIKEN NACH MODELL",
        "pdf_best_model_suffix": " (BESTES MODELL)",
        "pdf_height_age_val_pdf": "Gr√∂√üe-f√ºr-Alter-Bewertung:",
        "pdf_imc_height_val_pdf": "BMI-f√ºr-Gr√∂√üe-Bewertung:",
        "pdf_precision_pdf": "Pr√§zision:",
        "pdf_accuracy_pdf": "Genauigkeit:",
        "pdf_recall_pdf": "Recall:",
        "pdf_f1_score_pdf": "F1-Score:",
        "pdf_auc_roc_pdf": "AUC-ROC:",
        "pdf_confidence_pdf": "Konfidenz:",
        "pdf_mcc_pdf": "Matthews-Korrelationskoeffizient (MCC):",
        "pdf_summary_title": "ZUSAMMENFASSUNG UND EMPFEHLUNG",
        "pdf_recommended_model": "Empfohlenes Modell:",
        "pdf_summary_text": "Basierend auf den Leistungsmetriken zeigt das {} Modell die beste Leistung f√ºr diesen speziellen Fall. Es wird empfohlen, diese Ergebnisse zusammen mit einer professionellen klinischen Bewertung zu ber√ºcksichtigen.",
        "pdf_diagnosis_date": "Diagnosedatum:",
        "pdf_page_label": "Seite",
        "pdf_confusion_matrices_title": "VERWECHSLUNGSMATRIZEN NACH MODELL",
        "pdf_model_label": "Modell:",
        "pdf_image_not_found": "[Bild f√ºr Modell {} nicht gefunden]",
        "pdf_statistical_methods_title": "STATISTISCHE METHODEN - {}",
        "pdf_image_not_found_path": "[Bild nicht gefunden: {}]",
        "xgboost_precision_recall_imc_talla": "Pr√§zisions-Recall-Kurven BMI-f√ºr-Gr√∂√üe Modell",
        "xgboost_precision_recall_talla_edad": "Pr√§zisions-Recall-Kurven Gr√∂√üe-f√ºr-Alter Modell",
        "xgboost_roc_imc_talla": "ROC-Kurven BMI-f√ºr-Gr√∂√üe Modell",
        "xgboost_roc_talla_edad": "ROC-Kurven Gr√∂√üe-f√ºr-Alter Modell",
        "xgboost_calibration_imc_talla": "Kalibrierungsdiagramm BMI-f√ºr-Gr√∂√üe",
        "xgboost_calibration_talla_edad": "Kalibrierungsdiagramm Gr√∂√üe-f√ºr-Alter",
        "linear_precision_recall_imc_talla": "Pr√§zisions-Recall-Kurven BMI-f√ºr-Gr√∂√üe Modell",
        "linear_precision_recall_talla_edad": "Pr√§zisions-Recall-Kurven Gr√∂√üe-f√ºr-Alter Modell",
        "linear_roc_imc_talla": "ROC-Kurven BMI-f√ºr-Gr√∂√üe Modell",
        "linear_roc_talla_edad": "ROC-Kurven Gr√∂√üe-f√ºr-Alter Modell",
        "linear_calibration_imc_talla": "Kalibrierungsdiagramm BMI-f√ºr-Gr√∂√üe",
        "linear_calibration_talla_edad": "Kalibrierungsdiagramm Gr√∂√üe-f√ºr-Alter",
        "random_precision_recall_imc_talla": "Pr√§zisions-Recall-Kurven BMI-f√ºr-Gr√∂√üe Modell",
        "random_precision_recall_talla_edad": "Pr√§zisions-Recall-Kurven Gr√∂√üe-f√ºr-Alter Modell",
        "random_roc_imc_talla": "ROC-Kurven BMI-f√ºr-Gr√∂√üe Modell",
        "random_roc_talla_edad": "ROC-Kurven Gr√∂√üe-f√ºr-Alter Modell",
        "random_calibration_imc_talla": "Kalibrierungsdiagramm BMI-f√ºr-Gr√∂√üe",
        "random_calibration_talla_edad": "Kalibrierungsdiagramm Gr√∂√üe-f√ºr-Alter",
        "about_project_title": "üî¨ √úber das Projekt",
        "about_project_heading": "## Mehrmodell-Anthropometrische Ern√§hrungsbewertung",
        "about_project_intro": """
Diese fortschrittliche Anwendung verwendet **drei verschiedene maschinelle Lernmodelle**, um eine 
vollst√§ndige und zuverl√§ssige anthropometrische Ern√§hrungsbewertung bereitzustellen:
""",
        "about_models_heading": "### ü§ñ Implementierte Modelle:",
        "about_xgboost_title": "1. XGBoost (Extreme Gradient Boosting)",
        "about_xgboost_desc": """
- Hochleistungsf√§higes Ensemble-Modell
- Hervorragend f√ºr strukturierte Daten
- Automatische Handhabung fehlender Werte
""",
        "about_linear_regression_title": "2. Lineare Regression",
        "about_linear_regression_desc": """
- Interpretierbares und schnelles Modell
- Lineare Beziehungen zwischen Variablen
- Solide Basis f√ºr den Vergleich
""",
        "about_random_forest_title": "3. Random Forest",
        "about_random_forest_desc": """
- Ensemble von Entscheidungsb√§umen
- Robust gegen√ºber Overfitting
- Gute Generalisierung
""",
        "about_features_heading": "### üìä Hauptmerkmale:",
        "about_features_list": """
- **Vergleichende Analyse:** Gleichzeitige Bewertung mit allen drei Modellen
- **Erweiterte Metriken:** Pr√§zision, Genauigkeit, Recall, F1-Score, AUC-ROC und Konfidenzniveau
- **Professioneller Bericht:** Detailliertes PDF mit vergleichender Analyse
- **Identifizierung des besten Modells:** Automatische Empfehlung basierend auf Metriken
- **Interaktive Visualisierungen:** Wahrscheinlichkeitsdiagramme pro Modell
""",
        "about_clinical_application_heading": "### üè• Klinische Anwendung:",
        "about_clinical_application_list": """
- **Gr√∂√üe-f√ºr-Alter**-Bewertung
- **BMI-f√ºr-Gr√∂√üe**-Bewertung
- Vollst√§ndige Patientendaten
- Datum und Uhrzeit der Diagnose
""",
        "about_technologies_heading": "### üõ†Ô∏è Verwendete Technologien:",
        "about_technologies_list": """
- **Python** - Hauptsprache
- **Streamlit** - Interaktive Weboberfl√§che
- **XGBoost, Scikit-learn** - ML-Modelle
- **Matplotlib, Seaborn** - Visualisierungen
- **FPDF** - PDF-Berichtserstellung
- **Joblib** - Modellserialisierung
""",
        "about_quality_assurance_heading": "### üìà Qualit√§tssicherung:",
        "about_quality_assurance_list": """
- Alle Modelle behalten Metriken √ºber 80%
- Objektiver Vergleich zwischen Algorithmen
- Automatische Empfehlung des besten Modells
- Intuitive und professionelle Benutzeroberfl√§che
""",
        "model_status_heading": "üìç Modellstatus",
        "model_status_operational": "‚úÖ {}: Operationell",
        "model_status_unavailable": "‚ùå {}: Nicht verf√ºgbar",
        "navigation_sidebar_title": "üß≠ Navigation",
        "navigation_section_select": "W√§hlen Sie einen Bereich:",
        "nutrition_diagnosis_nav": "üî¨ Ern√§hrungsbewertung",
        "about_project_nav": "üìñ √úber das Projekt",
        "available_models_sidebar": "### üìä Verf√ºgbare Modelle"
    },
    "ja": {
        "label": "Êó•Êú¨Ë™û", # Japon√©s
        "navigation_sidebar_title": "„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥",
        "page_title": "Â§ö„É¢„Éá„É´‰∫∫‰ΩìË®àÊ∏¨Ê†ÑÈ§äË©ï‰æ°",
        "app_title": "üçé AI„Å´„Çà„ÇãÂ§ö„É¢„Éá„É´‰∫∫‰ΩìË®àÊ∏¨Ê†ÑÈ§äË©ï‰æ°",
        "app_description": """
„Åì„ÅÆ„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅØ„ÄÅ**3„Å§„ÅÆÊ©üÊ¢∞Â≠¶Áøí„É¢„Éá„É´**„Çí‰ΩøÁî®„Åó„Å¶‰∫∫‰ΩìË®àÊ∏¨Ê†ÑÈ§äË©ï‰æ°„Çí‰∫àÊ∏¨„Åó„Åæ„ÅôÔºö
- **XGBoost** (ÂãæÈÖç„Éñ„Éº„Çπ„ÉÜ„Ç£„É≥„Ç∞)
- **Á∑öÂΩ¢ÂõûÂ∏∞** (Linear Regression)
- **„É©„É≥„ÉÄ„É†„Éï„Ç©„É¨„Çπ„Éà** (Random Forest)
""",
        "model_loaded_success": "„É¢„Éá„É´ {} „ÅÆ„É≠„Éº„Éâ„Å´ÊàêÂäü„Åó„Åæ„Åó„Åü„ÄÇ",
        "model_file_not_found": "„Ç®„É©„Éº: „É¢„Éá„É´ {} „ÅÆ„Éï„Ç°„Ç§„É´„Åå {} „Å´Ë¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì",
        "model_load_error": "„É¢„Éá„É´ {} „ÅÆ„É≠„Éº„Éâ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: {}",
        "no_models_loaded": "„É¢„Éá„É´„Åå„É≠„Éº„Éâ„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ",
        "sex_input_error": "ÊÄßÂà• '{}' „ÅØ„É¢„Éá„É´ {} „Å´ÂØæ„Åó„Å¶ÁÑ°Âäπ„Åß„Åô",
        "no_models_available": "Âà©Áî®ÂèØËÉΩ„Å™„É¢„Éá„É´„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ",
        "enter_patient_data": "üìã Ê†ÑÈ§äË©ï‰æ°„Éá„Éº„Çø„ÇíÂÖ•Âäõ",
        "patient_data": "ÊÇ£ËÄÖ„Éá„Éº„Çø",
        "name_label": "Âêç:",
        "last_name_label": "Âßì:",
        "sex_label": "ÊÄßÂà•:",
        "male_short": "Áî∑", # Áî∑ÊÄß
        "female_short": "Â•≥", # Â•≥ÊÄß
        "weight_label": "‰ΩìÈáç (kg):",
        "height_label": "Ë∫´Èï∑ (m):",
        "age_label": "Âπ¥ÈΩ¢ („É∂Êúà):",
        "submit_button": "„Åô„Åπ„Å¶„ÅÆ„É¢„Éá„É´„ÅßË©ï‰æ°„ÇíÂÆüË°å",
        "name_lastname_required_error": "ÊÇ£ËÄÖ„ÅÆÊ∞èÂêç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
        "prediction_in_progress": "„Åô„Åπ„Å¶„ÅÆ„É¢„Éá„É´„ÅßÊ†ÑÈ§äË©ï‰æ°„ÇíÂÆüË°å‰∏≠...",
        "prediction_complete_success": "„Åô„Åπ„Å¶„ÅÆ„É¢„Éá„É´„ÅßË©ï‰æ°„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ",
        "patient_data_section": "üìä ÊÇ£ËÄÖ„Éá„Éº„Çø",
        "full_name_metric": "„Éï„É´„Éç„Éº„É†",
        "sex_metric": "ÊÄßÂà•",
        "weight_metric": "‰ΩìÈáç",
        "height_metric": "Ë∫´Èï∑",
        "age_metric": "Âπ¥ÈΩ¢",
        "imc_metric": "BMI",
        "results_section": "üî¨ ÁµêÊûú - {}",
        "height_age_val": "Ë∫´Èï∑-Âπ¥ÈΩ¢Ë©ï‰æ°:",
        "imc_height_val": "BMI-Ë∫´Èï∑Ë©ï‰æ°:",
        "precision_metric": "Á≤æÂ∫¶",
        "accuracy_metric": "Ê≠£Á¢∫Â∫¶",
        "recall_metric": "ÂÜçÁèæÁéá",
        "f1_score_metric": "F1„Çπ„Ç≥„Ç¢",
        "auc_roc_metric": "AUC-ROC",
        "confidence_metric": "‰ø°È†ºÂ∫¶",
        "matthews_corrcoef_metric": "„Éû„Ç∑„É•„Éº„Ç∫Áõ∏Èñ¢‰øÇÊï∞ (MCC):",
        "height_prob_chart_title": "Ë∫´Èï∑-Âπ¥ÈΩ¢Á¢∫Áéá - {}",
        "imc_prob_chart_title": "BMI-Ë∫´Èï∑Á¢∫Áéá - {}",
        "category_label": "„Ç´„ÉÜ„Ç¥„É™",
        "probability_label": "Á¢∫Áéá",
        "generate_report_section": "üìÑ ÂÆåÂÖ®„Å™„É¨„Éù„Éº„Éà„ÇíÁîüÊàê",
        "generate_pdf_button": "Â§ö„É¢„Éá„É´PDF„É¨„Éù„Éº„Éà„ÇíÁîüÊàê",
        "pdf_generated_success": "Â§ö„É¢„Éá„É´PDF„É¨„Éù„Éº„Éà„ÅåÊ≠£Â∏∏„Å´ÁîüÊàê„Åï„Çå„Åæ„Åó„ÅüÔºÅ„É™„É≥„ÇØ„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
        "download_pdf_link": "üìÑ Â§ö„É¢„Éá„É´PDF„É¨„Éù„Éº„Éà„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ",
        "pdf_report_title": "‰∫∫‰ΩìË®àÊ∏¨Ê†ÑÈ§äË©ï‰æ°„É¨„Éù„Éº„Éà",
        "pdf_report_subtitle": "‰∫∫Â∑•Áü•ËÉΩ„Å´„Çà„ÇãÂ§ö„É¢„Éá„É´ÂàÜÊûê",
        "pdf_patient_data_title": "ÊÇ£ËÄÖ„Éá„Éº„Çø",
        "pdf_name": "Ê∞èÂêç:",
        "pdf_sex": "ÊÄßÂà•:",
        "pdf_weight": "‰ΩìÈáç:",
        "pdf_height": "Ë∫´Èï∑:",
        "pdf_age": "Âπ¥ÈΩ¢:",
        "pdf_imc_calc": "ÁÆóÂá∫„Åï„Çå„ÅüBMI:",
        "pdf_results_title": "„É¢„Éá„É´Âà•„ÅÆÁµêÊûú„Å®„É°„Éà„É™„ÇØ„Çπ",
        "pdf_best_model_suffix": " („Éô„Çπ„Éà„É¢„Éá„É´)",
        "pdf_height_age_val_pdf": "Ë∫´Èï∑-Âπ¥ÈΩ¢Ë©ï‰æ°:",
        "pdf_imc_height_val_pdf": "BMI-Ë∫´Èï∑Ë©ï‰æ°:",
        "pdf_precision_pdf": "Á≤æÂ∫¶:",
        "pdf_accuracy_pdf": "Ê≠£Á¢∫Â∫¶:",
        "pdf_recall_pdf": "ÂÜçÁèæÁéá:",
        "pdf_f1_score_pdf": "F1„Çπ„Ç≥„Ç¢:",
        "pdf_auc_roc_pdf": "AUC-ROC:",
        "pdf_confidence_pdf": "‰ø°È†ºÂ∫¶:",
        "pdf_mcc_pdf": "„Éû„Ç∑„É•„Éº„Ç∫Áõ∏Èñ¢‰øÇÊï∞ (MCC):",
        "pdf_summary_title": "Ê¶ÇË¶Å„Å®Êé®Â•®‰∫ãÈ†Ö",
        "pdf_recommended_model": "Êé®Â•®„É¢„Éá„É´:",
        "pdf_summary_text": "ÊÄßËÉΩÊåáÊ®ô„Å´Âü∫„Å•„Åè„Å®„ÄÅ{} „É¢„Éá„É´„Åå„Åì„ÅÆÁâπÂÆö„ÅÆÂ†¥Âêà„Å´ÊúÄÈÅ©„Å™„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„ÇíÁ§∫„Åó„Åæ„Åô„ÄÇ„Åì„Çå„Çâ„ÅÆÁµêÊûú„ÅØ„ÄÅÂ∞ÇÈñÄÁöÑ„Å™Ëá®Â∫äË©ï‰æ°„Å®‰Ωµ„Åõ„Å¶ËÄÉÊÖÆ„Åô„Çã„Åì„Å®„Çí„ÅäÂãß„ÇÅ„Åó„Åæ„Åô„ÄÇ",
        "pdf_diagnosis_date": "Ë®∫Êñ≠Êó•:",
        "pdf_page_label": "„Éö„Éº„Ç∏",
        "pdf_confusion_matrices_title": "„É¢„Éá„É´Âà•„ÅÆÊ∑∑ÂêåË°åÂàó",
        "pdf_model_label": "„É¢„Éá„É´:",
        "pdf_image_not_found": "[„É¢„Éá„É´ {} „ÅÆÁîªÂÉè„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì]",
        "pdf_statistical_methods_title": "Áµ±Ë®àÁöÑÊâãÊ≥ï - {}",
        "pdf_image_not_found_path": "[ÁîªÂÉè„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: {}]",
        "xgboost_precision_recall_imc_talla": "BMI-Ë∫´Èï∑„É¢„Éá„É´„ÅÆÈÅ©ÂêàÁéá-ÂÜçÁèæÁéáÊõ≤Á∑ö",
        "xgboost_precision_recall_talla_edad": "Ë∫´Èï∑-Âπ¥ÈΩ¢„É¢„Éá„É´„ÅÆÈÅ©ÂêàÁéá-ÂÜçÁèæÁéáÊõ≤Á∑ö",
        "xgboost_roc_imc_talla": "BMI-Ë∫´Èï∑„É¢„Éá„É´„ÅÆROCÊõ≤Á∑ö",
        "xgboost_roc_talla_edad": "Ë∫´Èï∑-Âπ¥ÈΩ¢„É¢„Éá„É´„ÅÆROCÊõ≤Á∑ö",
        "xgboost_calibration_imc_talla": "BMI-Ë∫´Èï∑„Ç≠„É£„É™„Éñ„É¨„Éº„Ç∑„Éß„É≥„Éó„É≠„ÉÉ„Éà",
        "xgboost_calibration_talla_edad": "Ë∫´Èï∑-Âπ¥ÈΩ¢„Ç≠„É£„É™„Éñ„É¨„Éº„Ç∑„Éß„É≥„Éó„É≠„ÉÉ„Éà",
        "linear_precision_recall_imc_talla": "BMI-Ë∫´Èï∑„É¢„Éá„É´„ÅÆÈÅ©ÂêàÁéá-ÂÜçÁèæÁéáÊõ≤Á∑ö",
        "linear_precision_recall_talla_edad": "Ë∫´Èï∑-Âπ¥ÈΩ¢„É¢„Éá„É´„ÅÆÈÅ©ÂêàÁéá-ÂÜçÁèæÁéáÊõ≤Á∑ö",
        "linear_roc_imc_talla": "BMI-Ë∫´Èï∑„É¢„Éá„É´„ÅÆROCÊõ≤Á∑ö",
        "linear_roc_talla_edad": "Ë∫´Èï∑-Âπ¥ÈΩ¢„É¢„Éá„É´„ÅÆROCÊõ≤Á∑ö",
        "linear_calibration_imc_talla": "BMI-Ë∫´Èï∑„Ç≠„É£„É™„Éñ„É¨„Éº„Ç∑„Éß„É≥„Éó„É≠„ÉÉ„Éà",
        "linear_calibration_talla_edad": "Ë∫´Èï∑-Âπ¥ÈΩ¢„Ç≠„É£„É™„Éñ„É¨„Éº„Ç∑„Éß„É≥„Éó„É≠„ÉÉ„Éà",
        "random_precision_recall_imc_talla": "BMI-Ë∫´Èï∑„É¢„Éá„É´„ÅÆÈÅ©ÂêàÁéá-ÂÜçÁèæÁéáÊõ≤Á∑ö",
        "random_precision_recall_talla_edad": "Ë∫´Èï∑-Âπ¥ÈΩ¢„É¢„Éá„É´„ÅÆÈÅ©ÂêàÁéá-ÂÜçÁèæÁéáÊõ≤Á∑ö",
        "random_roc_imc_talla": "BMI-Ë∫´Èï∑„É¢„Éá„É´„ÅÆROCÊõ≤Á∑ö",
        "random_roc_talla_edad": "Ë∫´Èï∑-Âπ¥ÈΩ¢„É¢„Éá„É´„ÅÆROCÊõ≤Á∑ö",
        "random_calibration_imc_talla": "BMI-Ë∫´Èï∑„Ç≠„É£„É™„Éñ„É¨„Éº„Ç∑„Éß„É≥„Éó„É≠„ÉÉ„Éà",
        "random_calibration_talla_edad": "Ë∫´Èï∑-Âπ¥ÈΩ¢„Ç≠„É£„É™„Éñ„É¨„Éº„Ç∑„Éß„É≥„Éó„É≠„ÉÉ„Éà",
        "about_project_title": "üî¨ „Éó„É≠„Ç∏„Çß„ÇØ„Éà„Å´„Å§„ÅÑ„Å¶",
        "about_project_heading": "## Â§ö„É¢„Éá„É´‰∫∫‰ΩìË®àÊ∏¨Ê†ÑÈ§äË©ï‰æ°",
        "about_project_intro": """
„Åì„ÅÆÈ´òÂ∫¶„Å™„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅØ„ÄÅ**3„Å§„ÅÆÁï∞„Å™„ÇãÊ©üÊ¢∞Â≠¶Áøí„É¢„Éá„É´**„Çí‰ΩøÁî®„Åó„Å¶„ÄÅ
ÂåÖÊã¨ÁöÑ„Åß‰ø°È†ºÊÄß„ÅÆÈ´ò„ÅÑ‰∫∫‰ΩìË®àÊ∏¨Ê†ÑÈ§äË©ï‰æ°„ÇíÊèê‰æõ„Åó„Åæ„ÅôÔºö
""",
        "about_models_heading": "### ü§ñ ÂÆüË£Ö„É¢„Éá„É´Ôºö",
        "about_xgboost_title": "1. XGBoost (Extreme Gradient Boosting)",
        "about_xgboost_desc": """
- È´òÊÄßËÉΩ„Ç¢„É≥„Çµ„É≥„Éñ„É´„É¢„Éá„É´
- ÊßãÈÄ†Âåñ„Éá„Éº„Çø„Å´ÂÑ™„Çå„Å¶„ÅÑ„Çã
- Ê¨†ÊêçÂÄ§„ÇíËá™ÂãïÁöÑ„Å´Âá¶ÁêÜ
""",
        "about_linear_regression_title": "2. Á∑öÂΩ¢ÂõûÂ∏∞",
        "about_linear_regression_desc": """
- Ëß£ÈáàÂèØËÉΩ„ÅßÈ´òÈÄü„Å™„É¢„Éá„É´
- Â§âÊï∞Èñì„ÅÆÁ∑öÂΩ¢Èñ¢‰øÇ
- ÊØîËºÉ„ÅÆ„Åü„ÇÅ„ÅÆÂº∑Âõ∫„Å™Âü∫Áõ§
""",
        "about_random_forest_title": "3. „É©„É≥„ÉÄ„É†„Éï„Ç©„É¨„Çπ„Éà",
        "about_random_forest_desc": """
- Ê±∫ÂÆöÊú®„Ç¢„É≥„Çµ„É≥„Éñ„É´
- ÈÅéÂ≠¶Áøí„Å´Âº∑„ÅÑ
- ËâØÂ•Ω„Å™Ê±éÂåñÊÄßËÉΩ
""",
        "about_features_heading": "### üìä ‰∏ª„Å™Ê©üËÉΩÔºö",
        "about_features_list": """
- **ÊØîËºÉÂàÜÊûêÔºö** 3„Å§„ÅÆ„É¢„Éá„É´„Åô„Åπ„Å¶„ÅßÂêåÊôÇË©ï‰æ°
- **È´òÂ∫¶„Å™„É°„Éà„É™„ÇØ„ÇπÔºö** Á≤æÂ∫¶„ÄÅÊ≠£Á¢∫Â∫¶„ÄÅÂÜçÁèæÁéá„ÄÅF1„Çπ„Ç≥„Ç¢„ÄÅAUC-ROC„ÄÅ‰ø°È†ºÂ∫¶
- **„Éó„É≠„Éï„Çß„ÉÉ„Ç∑„Éß„Éä„É´„É¨„Éù„Éº„ÉàÔºö** ÊØîËºÉÂàÜÊûê„ÅÆË©≥Á¥∞„Å™PDF
- **ÊúÄÈÅ©„Å™„É¢„Éá„É´„ÅÆÁâπÂÆöÔºö** „É°„Éà„É™„ÇØ„Çπ„Å´Âü∫„Å•„ÅÑ„ÅüËá™ÂãïÊé®Â•®
- **„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„Å™ÂèØË¶ñÂåñÔºö** „É¢„Éá„É´„Åî„Å®„ÅÆÁ¢∫Áéá„ÉÅ„É£„Éº„Éà
""",
        "about_clinical_application_heading": "### üè• Ëá®Â∫äÂøúÁî®Ôºö",
        "about_clinical_application_list": """
- **Ë∫´Èï∑-Âπ¥ÈΩ¢**Ë©ï‰æ°
- **BMI-Ë∫´Èï∑**Ë©ï‰æ°
- ÂÆåÂÖ®„Å™ÊÇ£ËÄÖ„Éá„Éº„Çø
- Ë®∫Êñ≠Êó•ÊôÇ
""",
        "about_technologies_heading": "### üõ†Ô∏è ‰ΩøÁî®ÊäÄË°ìÔºö",
        "about_technologies_list": """
- **Python** - ‰∏ªË¶ÅË®ÄË™û
- **Streamlit** - ÂØæË©±Âûã„Ç¶„Çß„Éñ„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„Çπ
- **XGBoost, Scikit-learn** - Ê©üÊ¢∞Â≠¶Áøí„É¢„Éá„É´
- **Matplotlib, Seaborn** - ÂèØË¶ñÂåñ
- **FPDF** - PDF„É¨„Éù„Éº„ÉàÁîüÊàê
- **Joblib** - „É¢„Éá„É´„ÅÆ„Ç∑„É™„Ç¢„É©„Ç§„Ç∫
""",
        "about_quality_assurance_heading": "### üìà ÂìÅË≥™‰øùË®ºÔºö",
        "about_quality_assurance_list": """
- „Åô„Åπ„Å¶„ÅÆ„É¢„Éá„É´„Åå80%‰ª•‰∏ä„ÅÆ„É°„Éà„É™„ÇØ„Çπ„ÇíÁ∂≠ÊåÅ
- „Ç¢„É´„Ç¥„É™„Ç∫„É†Èñì„ÅÆÂÆ¢Ë¶≥ÁöÑ„Å™ÊØîËºÉ
- ÊúÄÈÅ©„Å™„É¢„Éá„É´„ÅÆËá™ÂãïÊé®Â•®
- Áõ¥ÊÑüÁöÑ„Åß„Éó„É≠„Éï„Çß„ÉÉ„Ç∑„Éß„Éä„É´„Å™„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„Çπ
""",
        "model_status_heading": "üìç „É¢„Éá„É´„Çπ„ÉÜ„Éº„Çø„Çπ",
        "model_status_operational": "‚úÖ {}: Á®ºÂÉç‰∏≠",
        "model_status_unavailable": "‚ùå {}: Âà©Áî®‰∏çÂèØ",
        "navigation_sidebar_title": "üß≠ „Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥",
        "navigation_section_select": "„Çª„ÇØ„Ç∑„Éß„É≥„ÇíÈÅ∏Êäû:",
        "nutrition_diagnosis_nav": "üî¨ Ê†ÑÈ§äË©ï‰æ°",
        "about_project_nav": "üìñ „Éó„É≠„Ç∏„Çß„ÇØ„Éà„Å´„Å§„ÅÑ„Å¶",
        "available_models_sidebar": "### üìä Âà©Áî®ÂèØËÉΩ„Å™„É¢„Éá„É´"
    },
    "fr": {
        "label": "Fran√ßais", # Franc√©s
        "navigation_sidebar_title": "Navigation",
        "page_title": "√âvaluation Nutritionnelle Anthropom√©trique Multi-Mod√®les",
        "app_title": "üçé √âvaluation Nutritionnelle Anthropom√©trique Multi-Mod√®les avec IA",
        "app_description": """
Cette application utilise **trois mod√®les d'apprentissage automatique** pour pr√©dire l'√©valuation nutritionnelle anthropom√©trique:
- **XGBoost** (Gradient Boosting)
- **R√©gression Lin√©aire** (Linear Regression)
- **Random Forest** (For√™ts Al√©atoires)
""",
        "model_loaded_success": "Mod√®le {} charg√© avec succ√®s.",
        "model_file_not_found": "Erreur: Fichiers du mod√®le {} introuvables dans {}",
        "model_load_error": "Erreur lors du chargement du mod√®le {}: {}",
        "no_models_loaded": "Aucun mod√®le charg√©.",
        "sex_input_error": "Le sexe '{}' n'est pas valide pour le mod√®le {}",
        "no_models_available": "Aucun mod√®le disponible.",
        "enter_patient_data": "üìã Saisir les Donn√©es pour l'√âvaluation Nutritionnelle",
        "patient_data": "Donn√©es du Patient",
        "name_label": "Pr√©nom:",
        "last_name_label": "Nom de famille:",
        "sex_label": "Sexe:",
        "male_short": "H", # Homme
        "female_short": "F", # Femme
        "weight_label": "Poids (kg):",
        "height_label": "Taille (m):",
        "age_label": "√Çge (mois):",
        "submit_button": "Effectuer l'√©valuation avec tous les mod√®les",
        "name_lastname_required_error": "Veuillez entrer le pr√©nom et le nom de famille du patient.",
        "prediction_in_progress": "√âvaluation nutritionnelle en cours avec tous les mod√®les...",
        "prediction_complete_success": "√âvaluation termin√©e avec tous les mod√®les !",
        "patient_data_section": "üìä Donn√©es du Patient",
        "full_name_metric": "Nom complet",
        "sex_metric": "Sexe",
        "weight_metric": "Poids",
        "height_metric": "Taille",
        "age_metric": "√Çge",
        "imc_metric": "IMC",
        "results_section": "üî¨ R√©sultats - {}",
        "height_age_val": "√âvaluation Taille-√Çge:",
        "imc_height_val": "√âvaluation IMC-Taille:",
        "precision_metric": "Pr√©cision",
        "accuracy_metric": "Exactitude",
        "recall_metric": "Rappel",
        "f1_score_metric": "Score F1",
        "auc_roc_metric": "AUC-ROC",
        "confidence_metric": "Confiance",
        "matthews_corrcoef_metric": "Coefficient de corr√©lation de Matthews (MCC):",
        "height_prob_chart_title": "Probabilit√©s Taille-√Çge - {}",
        "imc_prob_chart_title": "Probabilit√©s IMC-Taille - {}",
        "category_label": "Cat√©gorie",
        "probability_label": "Probabilit√©",
        "generate_report_section": "üìÑ G√©n√©rer le rapport complet",
        "generate_pdf_button": "G√©n√©rer le rapport PDF multi-mod√®les",
        "pdf_generated_success": "Rapport PDF multi-mod√®les g√©n√©r√© avec succ√®s ! Cliquez sur le lien pour t√©l√©charger.",
        "download_pdf_link": "üìÑ T√©l√©charger le rapport PDF multi-mod√®les",
        "pdf_report_title": "RAPPORT D'√âVALUATION NUTRITIONNELLE ANTHROPOM√âTRIQUE",
        "pdf_report_subtitle": "ANALYSE MULTI-MOD√àLES AVEC INTELLIGENCE ARTIFICIELLE",
        "pdf_patient_data_title": "DONN√âES DU PATIENT",
        "pdf_name": "Nom:",
        "pdf_sex": "Sexe:",
        "pdf_weight": "Poids:",
        "pdf_height": "Taille:",
        "pdf_age": "√Çge:",
        "pdf_imc_calc": "IMC Calcul√©:",
        "pdf_results_title": "R√âSULTATS ET M√âTRIQUES PAR MOD√àLE",
        "pdf_best_model_suffix": " (MEILLEUR MOD√àLE)",
        "pdf_height_age_val_pdf": "√âvaluation Taille-√Çge:",
        "pdf_imc_height_val_pdf": "√âvaluation IMC-Taille:",
        "pdf_precision_pdf": "Pr√©cision:",
        "pdf_accuracy_pdf": "Exactitude:",
        "pdf_recall_pdf": "Rappel:",
        "pdf_f1_score_pdf": "Score F1:",
        "pdf_auc_roc_pdf": "AUC-ROC:",
        "pdf_confidence_pdf": "Confiance:",
        "pdf_mcc_pdf": "Coefficient de corr√©lation de Matthews (MCC):",
        "pdf_summary_title": "R√âSUM√â ET RECOMMANDATION",
        "pdf_recommended_model": "Mod√®le recommand√©:",
        "pdf_summary_text": "Bas√© sur les m√©triques de performance, le mod√®le {} montre la meilleure performance pour ce cas particulier. Il est recommand√© de consid√©rer ces r√©sultats avec une √©valuation clinique professionnelle.",
        "pdf_diagnosis_date": "Date du diagnostic:",
        "pdf_page_label": "Page",
        "pdf_confusion_matrices_title": "MATRICES DE CONFUSION PAR MOD√àLE",
        "pdf_model_label": "Mod√®le:",
        "pdf_image_not_found": "[Image introuvable pour le mod√®le {}]",
        "pdf_statistical_methods_title": "M√âTHODES STATISTIQUES - {}",
        "pdf_image_not_found_path": "[Image introuvable: {}]",
        "xgboost_precision_recall_imc_talla": "Courbes pr√©cision-rappel mod√®le IMC-Taille",
        "xgboost_precision_recall_talla_edad": "Courbes pr√©cision-rappel mod√®le Taille-√Çge",
        "xgboost_roc_imc_talla": "Courbes ROC mod√®le IMC-Taille",
        "xgboost_roc_talla_edad": "Courbes ROC mod√®le Taille-√Çge",
        "xgboost_calibration_imc_talla": "Graphique de calibration IMC-Taille",
        "xgboost_calibration_talla_edad": "Graphique de calibration Taille-√Çge",
        "linear_precision_recall_imc_talla": "Courbes pr√©cision-rappel mod√®le IMC-Taille",
        "linear_precision_recall_talla_edad": "Courbes pr√©cision-rappel mod√®le Taille-√Çge",
        "linear_roc_imc_talla": "Courbes ROC mod√®le IMC-Taille",
        "linear_roc_talla_edad": "Courbes ROC mod√®le Taille-√Çge",
        "linear_calibration_imc_talla": "Graphique de calibration IMC-Taille",
        "linear_calibration_talla_edad": "Graphique de calibration Taille-√Çge",
        "random_precision_recall_imc_talla": "Courbes pr√©cision-rappel mod√®le IMC-Taille",
        "random_precision_recall_talla_edad": "Courbes pr√©cision-rappel mod√®le Taille-√Çge",
        "random_roc_imc_talla": "Courbes ROC mod√®le IMC-Taille",
        "random_roc_talla_edad": "Courbes ROC mod√®le Taille-√Çge",
        "random_calibration_imc_talla": "Graphique de calibration IMC-Taille",
        "random_calibration_talla_edad": "Graphique de calibration Taille-√Çge",
        "about_project_title": "üî¨ √Ä propos du projet",
        "about_project_heading": "## √âvaluation Nutritionnelle Anthropom√©trique Multi-Mod√®les",
        "about_project_intro": """
Cette application avanc√©e utilise **trois mod√®les d'apprentissage automatique** diff√©rents pour fournir une 
√©valuation nutritionnelle anthropom√©trique compl√®te et fiable:
""",
        "about_models_heading": "### ü§ñ Mod√®les impl√©ment√©s:",
        "about_xgboost_title": "1. XGBoost (Extreme Gradient Boosting)",
        "about_xgboost_desc": """
- Mod√®le d'ensemble haute performance
- Excellent pour les donn√©es structur√©es
- Gestion automatique des valeurs manquantes
""",
        "about_linear_regression_title": "2. R√©gression Lin√©aire",
        "about_linear_regression_desc": """
- Mod√®le interpr√©table et rapide
- Relations lin√©aires entre les variables
- Base solide pour la comparaison
""",
        "about_random_forest_title": "3. Random Forest",
        "about_random_forest_desc": """
- Ensemble d'arbres de d√©cision
- Robuste contre le surapprentissage
- Bonne g√©n√©ralisation
""",
        "about_features_heading": "### üìä Caract√©ristiques principales:",
        "about_features_list": """
- **Analyse comparative:** √âvaluation simultan√©e avec les trois mod√®les
- **M√©triques avanc√©es:** Pr√©cision, exactitude, rappel, score F1, AUC-ROC et niveau de confiance
- **Rapport professionnel:** PDF d√©taill√© avec analyse comparative
- **Identification du meilleur mod√®le:** Recommandation automatique bas√©e sur les m√©triques
- **Visualisations interactives:** Graphiques de probabilit√©s par mod√®le
""",
        "about_clinical_application_heading": "### üè• Application clinique:",
        "about_clinical_application_list": """
- √âvaluation de la **taille pour l'√¢ge**
- √âvaluation de l'**IMC pour la taille**
- Donn√©es patient compl√®tes
- Date et heure du diagnostic
""",
        "about_technologies_heading": "### üõ†Ô∏è Technologies utilis√©es:",
        "about_technologies_list": """
- **Python** - Langage principal
- **Streamlit** - Interface web interactive
- **XGBoost, Scikit-learn** - Mod√®les ML
- **Matplotlib, Seaborn** - Visualisations
- **FPDF** - G√©n√©ration de rapports PDF
- **Joblib** - S√©rialisation de mod√®les
""",
        "about_quality_assurance_heading": "### üìà Assurance qualit√©:",
        "about_quality_assurance_list": """
- Tous les mod√®les maintiennent des m√©triques sup√©rieures √† 80%
- Comparaison objective entre les algorithmes
- Recommandation automatique du meilleur mod√®le
- Interface intuitive et professionnelle
""",
        "model_status_heading": "üìç √âtat des mod√®les",
        "model_status_operational": "‚úÖ {}: Op√©rationnel",
        "model_status_unavailable": "‚ùå {}: Indisponible",
        "navigation_sidebar_title": "üß≠ Navigation",
        "navigation_section_select": "S√©lectionnez une section:",
        "nutrition_diagnosis_nav": "üî¨ √âvaluation Nutritionnelle",
        "about_project_nav": "üìñ √Ä propos du projet",
        "available_models_sidebar": "### üìä Mod√®les disponibles"
    },
    "pt": {
        "label": "Portugu√™s", # Portugu√©s
        "navigation_sidebar_title": "Navega√ß√£o",
        "page_title": "Avalia√ß√£o Nutricional Antropom√©trica Multi-Modelo",
        "app_title": "üçé Avalia√ß√£o Nutricional Antropom√©trica com IA Multi-Modelo",
        "app_description": """
Esta aplica√ß√£o utiliza **tr√™s modelos de Machine Learning** para prever a avalia√ß√£o nutricional antropom√©trica:
- **XGBoost** (Gradient Boosting)
- **Regress√£o Linear** (Linear Regression)
- **Random Forest** (Florestas Aleat√≥rias)
""",
        "model_loaded_success": "Modelo {} carregado com sucesso.",
        "model_file_not_found": "Erro: Arquivos do modelo {} n√£o encontrados em {}",
        "model_load_error": "Erro ao carregar modelo {}: {}",
        "no_models_loaded": "Nenhum modelo carregado.",
        "sex_input_error": "O sexo '{}' n√£o √© v√°lido para o modelo {}",
        "no_models_available": "Nenhum modelo dispon√≠vel.",
        "enter_patient_data": "üìã Inserir Dados para Avalia√ß√£o Nutricional",
        "patient_data": "Dados do Paciente",
        "name_label": "Nome:",
        "last_name_label": "Sobrenome:",
        "sex_label": "Sexo:",
        "male_short": "M", # Masculino
        "female_short": "F", # Feminino
        "weight_label": "Peso (kg):",
        "height_label": "Altura (m):",
        "age_label": "Idade (meses):",
        "submit_button": "Realizar Avalia√ß√£o com Todos os Modelos",
        "name_lastname_required_error": "Por favor, insira o nome e sobrenome do paciente.",
        "prediction_in_progress": "Realizando avalia√ß√£o nutricional com todos os modelos...",
        "prediction_complete_success": "Avalia√ß√£o conclu√≠da com todos os modelos!",
        "patient_data_section": "üìä Dados do Paciente",
        "full_name_metric": "Nome Completo",
        "sex_metric": "Sexo",
        "weight_metric": "Peso",
        "height_metric": "Altura",
        "age_metric": "Idade",
        "imc_metric": "IMC",
        "results_section": "üî¨ Resultados - {}",
        "height_age_val": "Avalia√ß√£o Altura-Idade:",
        "imc_height_val": "Avalia√ß√£o IMC-Altura:",
        "precision_metric": "Precis√£o",
        "accuracy_metric": "Acur√°cia",
        "recall_metric": "Recall",
        "f1_score_metric": "F1-Score",
        "auc_roc_metric": "AUC-ROC",
        "confidence_metric": "Confian√ßa",
        "matthews_corrcoef_metric": "Coeficiente de Correla√ß√£o de Matthews (MCC):",
        "height_prob_chart_title": "Probabilidades Altura-Idade - {}",
        "imc_prob_chart_title": "Probabilidades IMC-Altura - {}",
        "category_label": "Categoria",
        "probability_label": "Probabilidade",
        "generate_report_section": "üìÑ Gerar Relat√≥rio Completo",
        "generate_pdf_button": "Gerar Relat√≥rio PDF Multi-Modelo",
        "pdf_generated_success": "Relat√≥rio PDF multi-modelo gerado com sucesso! Clique no link para baixar.",
        "download_pdf_link": "üìÑ Baixar Relat√≥rio PDF Multi-Modelo",
        "pdf_report_title": "RELAT√ìRIO DE AVALIA√á√ÉO NUTRICIONAL ANTROPOM√âTRICA",
        "pdf_report_subtitle": "AN√ÅLISE MULTI-MODELO COM INTELIG√äNCIA ARTIFICIAL",
        "pdf_patient_data_title": "DADOS DO PACIENTE",
        "pdf_name": "Nome:",
        "pdf_sex": "Sexo:",
        "pdf_weight": "Peso:",
        "pdf_height": "Altura:",
        "pdf_age": "Idade:",
        "pdf_imc_calc": "IMC Calculado:",
        "pdf_results_title": "RESULTADOS E M√âTRICAS POR MODELO",
        "pdf_best_model_suffix": " (MELHOR MODELO)",
        "pdf_height_age_val_pdf": "Avalia√ß√£o Altura-Idade:",
        "pdf_imc_height_val_pdf": "Avalia√ß√£o IMC-Altura:",
        "pdf_precision_pdf": "Precis√£o:",
        "pdf_accuracy_pdf": "Acur√°cia:",
        "pdf_recall_pdf": "Recall:",
        "pdf_f1_score_pdf": "F1-Score:",
        "pdf_auc_roc_pdf": "AUC-ROC:",
        "pdf_confidence_pdf": "Confian√ßa:",
        "pdf_mcc_pdf": "Coeficiente de Correla√ß√£o de Matthews (MCC):",
        "pdf_summary_title": "RESUMO E RECOMENDA√á√ÉO",
        "pdf_recommended_model": "Modelo recomendado:",
        "pdf_summary_text": "Com base nas m√©tricas de desempenho, o modelo {} apresenta o melhor desempenho para este caso particular. Recomenda-se considerar esses resultados juntamente com a avalia√ß√£o cl√≠nica profissional.",
        "pdf_diagnosis_date": "Data do diagn√≥stico:",
        "pdf_page_label": "P√°gina",
        "pdf_confusion_matrices_title": "MATRIZES DE CONFUS√ÉO POR MODELO",
        "pdf_model_label": "Modelo:",
        "pdf_image_not_found": "[Imagem n√£o encontrada para o modelo {}]",
        "pdf_statistical_methods_title": "M√âTODOS ESTAT√çSTICOS - {}",
        "pdf_image_not_found_path": "[Imagem n√£o encontrada: {}]",
        "xgboost_precision_recall_imc_talla": "Curvas Precis√£o-Recall Modelo IMC-Altura",
        "xgboost_precision_recall_talla_edad": "Curvas Precis√£o-Recall Modelo Altura-Idade",
        "xgboost_roc_imc_talla": "Curvas ROC Modelo IMC-Altura",
        "xgboost_roc_talla_edad": "Curvas ROC Modelo Altura-Idade",
        "xgboost_calibration_imc_talla": "Gr√°fico de Calibra√ß√£o IMC-Altura",
        "xgboost_calibration_talla_edad": "Gr√°fico de Calibra√ß√£o Altura-Idade",
        "linear_precision_recall_imc_talla": "Curvas Precis√£o-Recall Modelo IMC-Altura",
        "linear_precision_recall_talla_edad": "Curvas Precis√£o-Recall Modelo Altura-Idade",
        "linear_roc_imc_talla": "Curvas ROC Modelo IMC-Altura",
        "linear_roc_talla_edad": "Curvas ROC Modelo Altura-Idade",
        "linear_calibration_imc_talla": "Gr√°fico de Calibra√ß√£o IMC-Altura",
        "linear_calibration_talla_edad": "Gr√°fico de Calibra√ß√£o Altura-Idade",
        "random_precision_recall_imc_talla": "Curvas Precis√£o-Recall Modelo IMC-Altura",
        "random_precision_recall_talla_edad": "Curvas Precis√£o-Recall Modelo Altura-Idade",
        "random_roc_imc_talla": "Curvas ROC Modelo IMC-Altura",
        "random_roc_talla_edad": "Curvas ROC Modelo Altura-Idade",
        "random_calibration_imc_talla": "Gr√°fico de Calibra√ß√£o IMC-Altura",
        "random_calibration_talla_edad": "Gr√°fico de Calibra√ß√£o Altura-Idade",
        "about_project_title": "üî¨ Sobre o Projeto",
        "about_project_heading": "## Avalia√ß√£o Nutricional Antropom√©trica Multi-Modelo",
        "about_project_intro": """
Esta aplica√ß√£o avan√ßada utiliza **tr√™s modelos de Machine Learning** diferentes para fornecer uma 
avalia√ß√£o nutricional antropom√©trica completa e confi√°vel:
""",
        "about_models_heading": "### ü§ñ Modelos Implementados:",
        "about_xgboost_title": "1. XGBoost (Extreme Gradient Boosting)",
        "about_xgboost_desc": """
- Modelo ensemble de alto desempenho
- Excelente para dados estruturados
- Manuseio autom√°tico de valores ausentes
""",
        "about_linear_regression_title": "2. Regress√£o Linear",
        "about_linear_regression_desc": """
- Modelo interpret√°vel e r√°pido
- Rela√ß√µes lineares entre vari√°veis
- Base s√≥lida para compara√ß√£o
""",
        "about_random_forest_title": "3. Random Forest",
        "about_random_forest_desc": """
- Ensemble de √°rvores de decis√£o
- Robusto contra overfitting
- Boa generaliza√ß√£o
""",
        "about_features_heading": "### üìä Principais Caracter√≠sticas:",
        "about_features_list": """
- **An√°lise Comparativa:** Avalia√ß√£o simult√¢nea com os tr√™s modelos
- **M√©tricas Avan√ßadas:** Precis√£o, acur√°cia, recall, F1-score, AUC-ROC e n√≠vel de confian√ßa
- **Relat√≥rio Profissional:** PDF detalhado com an√°lise comparativa
- **Identifica√ß√£o do Melhor Modelo:** Recomenda√ß√£o autom√°tica baseada em m√©tricas
- **Visualiza√ß√µes Interativas:** Gr√°ficos de probabilidades por modelo
""",
        "about_clinical_application_heading": "### üè• Aplica√ß√£o Cl√≠nica:",
        "about_clinical_application_list": """
- Avalia√ß√£o de **Altura para Idade**
- Avalia√ß√£o de **IMC para Altura**
- Dados completos do paciente
- Data e hora do diagn√≥stico
""",
        "about_technologies_heading": "### üõ†Ô∏è Tecnologias Utilizadas:",
        "about_technologies_list": """
- **Python** - Linguagem principal
- **Streamlit** - Interface web interativa
- **XGBoost, Scikit-learn** - Modelos de ML
- **Matplotlib, Seaborn** - Visualiza√ß√µes
- **FPDF** - Gera√ß√£o de relat√≥rios PDF
- **Joblib** - Serializa√ß√£o de modelos
""",
        "about_quality_assurance_heading": "### üìà Garantia de Qualidade:",
        "about_quality_assurance_list": """
- Todos os modelos mant√™m m√©tricas acima de 80%
- Compara√ß√£o objetiva entre algoritmos
- Recomenda√ß√£o autom√°tica do melhor modelo
- Interface intuitiva e profissional
""",
        "model_status_heading": "üìç Status dos Modelos",
        "model_status_operational": "‚úÖ {}: Operacional",
        "model_status_unavailable": "‚ùå {}: Indispon√≠vel",
        "navigation_sidebar_title": "üß≠ Navega√ß√£o",
        "navigation_section_select": "Selecione uma se√ß√£o:",
        "nutrition_diagnosis_nav": "üî¨ Avalia√ß√£o Nutricional",
        "about_project_nav": "üìñ Sobre o Projeto",
        "available_models_sidebar": "### üìä Modelos Dispon√≠veis"
    },
    "ko": {
        "label": "ÌïúÍµ≠Ïñ¥", # Coreano
        "navigation_sidebar_title": "ÌÉêÏÉâ",
        "page_title": "Îã§Ï§ë Î™®Îç∏ Ïù∏Ï≤¥ Ï∏°Ï†ï ÏòÅÏñë ÌèâÍ∞Ä",
        "app_title": "üçé AI Í∏∞Î∞ò Îã§Ï§ë Î™®Îç∏ Ïù∏Ï≤¥ Ï∏°Ï†ï ÏòÅÏñë ÌèâÍ∞Ä",
        "app_description": """
Ïù¥ Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖòÏùÄ **ÏÑ∏ Í∞ÄÏßÄ Î®∏Ïã†Îü¨Îãù Î™®Îç∏**ÏùÑ ÏÇ¨Ïö©ÌïòÏó¨ Ïù∏Ï≤¥ Ï∏°Ï†ï ÏòÅÏñë ÌèâÍ∞ÄÎ•º ÏòàÏ∏°Ìï©ÎãàÎã§:
- **XGBoost** (Í≤ΩÏÇ¨ Î∂ÄÏä§ÌåÖ)
- **ÏÑ†Ìòï ÌöåÍ∑Ä** (Linear Regression)
- **ÎûúÎç§ Ìè¨Î†àÏä§Ìä∏** (Random Forest)
""",
        "model_loaded_success": "Î™®Îç∏ {} Ïù¥(Í∞Ä) ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Î°úÎìúÎêòÏóàÏäµÎãàÎã§.",
        "model_file_not_found": "Ïò§Î•ò: Î™®Îç∏ {} ÌååÏùºÏù¥ {} ÏóêÏÑú(Îäî) Î∞úÍ≤¨ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.",
        "model_load_error": "Î™®Îç∏ {} Î°úÎìú Ï§ë Ïò§Î•ò Î∞úÏÉù: {}",
        "no_models_loaded": "Î°úÎìúÎêú Î™®Îç∏Ïù¥ ÏóÜÏäµÎãàÎã§.",
        "sex_input_error": "ÏÑ±Î≥Ñ '{}' ÏùÄ(Îäî) Î™®Îç∏ {} Ïóê(Í≤å) Ïú†Ìö®ÌïòÏßÄ ÏïäÏäµÎãàÎã§.",
        "no_models_available": "ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Î™®Îç∏Ïù¥ ÏóÜÏäµÎãàÎã§.",
        "enter_patient_data": "üìã ÏòÅÏñë ÌèâÍ∞ÄÎ•º ÏúÑÌïú Îç∞Ïù¥ÌÑ∞ ÏûÖÎ†•",
        "patient_data": "ÌôòÏûê Îç∞Ïù¥ÌÑ∞",
        "name_label": "Ïù¥Î¶Ñ:",
        "last_name_label": "ÏÑ±:",
        "sex_label": "ÏÑ±Î≥Ñ:",
        "male_short": "ÎÇ®", # ÎÇ®ÏÑ±
        "female_short": "Ïó¨", # Ïó¨ÏÑ±
        "weight_label": "Ï≤¥Ï§ë (kg):",
        "height_label": "Ïã†Ïû• (m):",
        "age_label": "ÎÇòÏù¥ (Í∞úÏõî):",
        "submit_button": "Î™®Îì† Î™®Îç∏Î°ú ÌèâÍ∞Ä ÏàòÌñâ",
        "name_lastname_required_error": "ÌôòÏûêÏùò Ïù¥Î¶ÑÍ≥º ÏÑ±ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî.",
        "prediction_in_progress": "Î™®Îì† Î™®Îç∏Î°ú ÏòÅÏñë ÌèâÍ∞ÄÎ•º ÏàòÌñâ Ï§ë...",
        "prediction_complete_success": "Î™®Îì† Î™®Îç∏Î°ú ÌèâÍ∞ÄÍ∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!",
        "patient_data_section": "üìä ÌôòÏûê Îç∞Ïù¥ÌÑ∞",
        "full_name_metric": "Ï†ÑÏ≤¥ Ïù¥Î¶Ñ",
        "sex_metric": "ÏÑ±Î≥Ñ",
        "weight_metric": "Ï≤¥Ï§ë",
        "height_metric": "Ïã†Ïû•",
        "age_metric": "ÎÇòÏù¥",
        "imc_metric": "BMI",
        "results_section": "üî¨ Í≤∞Í≥º - {}",
        "height_age_val": "Ïã†Ïû•-Ïó∞Î†π ÌèâÍ∞Ä:",
        "imc_height_val": "BMI-Ïã†Ïû• ÌèâÍ∞Ä:",
        "precision_metric": "Ï†ïÎ∞ÄÎèÑ",
        "accuracy_metric": "Ï†ïÌôïÎèÑ",
        "recall_metric": "Ïû¨ÌòÑÏú®",
        "f1_score_metric": "F1-Ï†êÏàò",
        "auc_roc_metric": "AUC-ROC",
        "confidence_metric": "Ïã†Î¢∞ÎèÑ",
        "matthews_corrcoef_metric": "Îß§Ìäú ÏÉÅÍ¥Ä Í≥ÑÏàò (MCC):",
        "height_prob_chart_title": "Ïã†Ïû•-Ïó∞Î†π ÌôïÎ•† - {}",
        "imc_prob_chart_title": "BMI-Ïã†Ïû• ÌôïÎ•† - {}",
        "category_label": "Î≤îÏ£º",
        "probability_label": "ÌôïÎ•†",
        "generate_report_section": "üìÑ Ï†ÑÏ≤¥ Î≥¥Í≥†ÏÑú ÏÉùÏÑ±",
        "generate_pdf_button": "Îã§Ï§ë Î™®Îç∏ PDF Î≥¥Í≥†ÏÑú ÏÉùÏÑ±",
        "pdf_generated_success": "Îã§Ï§ë Î™®Îç∏ PDF Î≥¥Í≥†ÏÑúÍ∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§! Îã§Ïö¥Î°úÎìú ÎßÅÌÅ¨Î•º ÌÅ¥Î¶≠ÌïòÏÑ∏Ïöî.",
        "download_pdf_link": "üìÑ Îã§Ï§ë Î™®Îç∏ PDF Î≥¥Í≥†ÏÑú Îã§Ïö¥Î°úÎìú",
        "pdf_report_title": "Ïù∏Ï≤¥ Ï∏°Ï†ï ÏòÅÏñë ÌèâÍ∞Ä Î≥¥Í≥†ÏÑú",
        "pdf_report_subtitle": "Ïù∏Í≥µÏßÄÎä• Í∏∞Î∞ò Îã§Ï§ë Î™®Îç∏ Î∂ÑÏÑù",
        "pdf_patient_data_title": "ÌôòÏûê Îç∞Ïù¥ÌÑ∞",
        "pdf_name": "Ïù¥Î¶Ñ:",
        "pdf_sex": "ÏÑ±Î≥Ñ:",
        "pdf_weight": "Ï≤¥Ï§ë:",
        "pdf_height": "Ïã†Ïû•:",
        "pdf_age": "ÎÇòÏù¥:",
        "pdf_imc_calc": "Í≥ÑÏÇ∞Îêú BMI:",
        "pdf_results_title": "Î™®Îç∏Î≥Ñ Í≤∞Í≥º Î∞è ÏßÄÌëú",
        "pdf_best_model_suffix": " (ÏµúÍ≥† Î™®Îç∏)",
        "pdf_height_age_val_pdf": "Ïã†Ïû•-Ïó∞Î†π ÌèâÍ∞Ä:",
        "pdf_imc_height_val_pdf": "BMI-Ïã†Ïû• ÌèâÍ∞Ä:",
        "pdf_precision_pdf": "Ï†ïÎ∞ÄÎèÑ:",
        "pdf_accuracy_pdf": "Ï†ïÌôïÎèÑ:",
        "pdf_recall_pdf": "Ïû¨ÌòÑÏú®:",
        "pdf_f1_score_pdf": "F1-Ï†êÏàò:",
        "pdf_auc_roc_pdf": "AUC-ROC:",
        "pdf_confidence_pdf": "Ïã†Î¢∞ÎèÑ:",
        "pdf_mcc_pdf": "Îß§Ìäú ÏÉÅÍ¥Ä Í≥ÑÏàò (MCC):",
        "pdf_summary_title": "ÏöîÏïΩ Î∞è Í∂åÏû• ÏÇ¨Ìï≠",
        "pdf_recommended_model": "Í∂åÏû• Î™®Îç∏:",
        "pdf_summary_text": "ÏÑ±Îä• ÏßÄÌëúÎ•º Í∏∞Î∞òÏúºÎ°ú, {} Î™®Îç∏Ïù¥ Ïù¥ ÌäπÏ†ï Í≤ΩÏö∞Ïóê Í∞ÄÏû• Ï¢ãÏùÄ ÏÑ±Îä•ÏùÑ Î≥¥ÏûÖÎãàÎã§. Ï†ÑÎ¨∏Ï†ÅÏù∏ ÏûÑÏÉÅ ÌèâÍ∞ÄÏôÄ Ìï®Íªò Ïù¥ Í≤∞Í≥ºÎ•º Í≥†Î†§ÌïòÎäî Í≤ÉÏù¥ Ï¢ãÏäµÎãàÎã§.",
        "pdf_diagnosis_date": "ÏßÑÎã® ÎÇ†Ïßú:",
        "pdf_page_label": "ÌéòÏù¥ÏßÄ",
        "pdf_confusion_matrices_title": "Î™®Îç∏Î≥Ñ ÌòºÎèô ÌñâÎ†¨",
        "pdf_model_label": "Î™®Îç∏:",
        "pdf_image_not_found": "[Î™®Îç∏ {} Ïùò Ïù¥ÎØ∏ÏßÄÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§]",
        "pdf_statistical_methods_title": "ÌÜµÍ≥ÑÏ†Å Î∞©Î≤ï - {}",
        "pdf_image_not_found_path": "[Ïù¥ÎØ∏ÏßÄÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§: {}]",
        "xgboost_precision_recall_imc_talla": "BMI-Ïã†Ïû• Î™®Îç∏ Ï†ïÎ∞ÄÎèÑ-Ïû¨ÌòÑÏú® Í≥°ÏÑ†",
        "xgboost_precision_recall_talla_edad": "Ïã†Ïû•-Ïó∞Î†π Î™®Îç∏ Ï†ïÎ∞ÄÎèÑ-Ïû¨ÌòÑÏú® Í≥°ÏÑ†",
        "xgboost_roc_imc_talla": "BMI-Ïã†Ïû• Î™®Îç∏ ROC Í≥°ÏÑ†",
        "xgboost_roc_talla_edad": "Ïã†Ïû•-Ïó∞Î†π Î™®Îç∏ ROC Í≥°ÏÑ†",
        "xgboost_calibration_imc_talla": "BMI-Ïã†Ïû• Î≥¥Ï†ï ÌîåÎ°Ø",
        "xgboost_calibration_talla_edad": "Ïã†Ïû•-Ïó∞Î†π Î≥¥Ï†ï ÌîåÎ°Ø",
        "linear_precision_recall_imc_talla": "BMI-Ïã†Ïû• Î™®Îç∏ Ï†ïÎ∞ÄÎèÑ-Ïû¨ÌòÑÏú® Í≥°ÏÑ†",
        "linear_precision_recall_talla_edad": "Ïã†Ïû•-Ïó∞Î†π Î™®Îç∏ Ï†ïÎ∞ÄÎèÑ-Ïû¨ÌòÑÏú® Í≥°ÏÑ†",
        "linear_roc_imc_talla": "BMI-Ïã†Ïû• Î™®Îç∏ ROC Í≥°ÏÑ†",
        "linear_roc_talla_edad": "Ïã†Ïû•-Ïó∞Î†π Î™®Îç∏ ROC Í≥°ÏÑ†",
        "linear_calibration_imc_talla": "BMI-Ïã†Ïû• Î≥¥Ï†ï ÌîåÎ°Ø",
        "linear_calibration_talla_edad": "Ïã†Ïû•-Ïó∞Î†π Î≥¥Ï†ï ÌîåÎ°Ø",
        "random_precision_recall_imc_talla": "BMI-Ïã†Ïû• Î™®Îç∏ Ï†ïÎ∞ÄÎèÑ-Ïû¨ÌòÑÏú® Í≥°ÏÑ†",
        "random_precision_recall_talla_edad": "Ïã†Ïû•-Ïó∞Î†π Î™®Îç∏ Ï†ïÎ∞ÄÎèÑ-Ïû¨ÌòÑÏú® Í≥°ÏÑ†",
        "random_roc_imc_talla": "BMI-Ïã†Ïû• Î™®Îç∏ ROC Í≥°ÏÑ†",
        "random_roc_talla_edad": "Ïã†Ïû•-Ïó∞Î†π Î™®Îç∏ ROC Í≥°ÏÑ†",
        "random_calibration_imc_talla": "BMI-Ïã†Ïû• Î≥¥Ï†ï ÌîåÎ°Ø",
        "random_calibration_talla_edad": "Ïã†Ïû•-Ïó∞Î†π Î≥¥Ï†ï ÌîåÎ°Ø",
        "about_project_title": "üî¨ ÌîÑÎ°úÏ†ùÌä∏ Ï†ïÎ≥¥",
        "about_project_heading": "## Îã§Ï§ë Î™®Îç∏ Ïù∏Ï≤¥ Ï∏°Ï†ï ÏòÅÏñë ÌèâÍ∞Ä",
        "about_project_intro": """
Ïù¥ Í≥†Í∏â Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖòÏùÄ **ÏÑ∏ Í∞ÄÏßÄ Îã§Î•∏ Î®∏Ïã†Îü¨Îãù Î™®Îç∏**ÏùÑ ÏÇ¨Ïö©ÌïòÏó¨
ÏôÑÎ≤ΩÌïòÍ≥† Ïã†Î¢∞Ìï† Ïàò ÏûàÎäî Ïù∏Ï≤¥ Ï∏°Ï†ï ÏòÅÏñë ÌèâÍ∞ÄÎ•º Ï†úÍ≥µÌï©ÎãàÎã§:
""",
        "about_models_heading": "### ü§ñ Íµ¨ÌòÑÎêú Î™®Îç∏:",
        "about_xgboost_title": "1. XGBoost (Í∑πÎã®Ï†Å Í≤ΩÏÇ¨ Î∂ÄÏä§ÌåÖ)",
        "about_xgboost_desc": """
- Í≥†ÏÑ±Îä• ÏïôÏÉÅÎ∏î Î™®Îç∏
- Íµ¨Ï°∞ÌôîÎêú Îç∞Ïù¥ÌÑ∞Ïóê ÌÉÅÏõî
- Í≤∞Ï∏°Í∞í ÏûêÎèô Ï≤òÎ¶¨
""",
        "about_linear_regression_title": "2. ÏÑ†Ìòï ÌöåÍ∑Ä",
        "about_linear_regression_desc": """
- Ìï¥ÏÑù Í∞ÄÎä•ÌïòÍ≥† Îπ†Î•∏ Î™®Îç∏
- Î≥ÄÏàò Í∞ÑÏùò ÏÑ†Ìòï Í¥ÄÍ≥Ñ
- ÎπÑÍµêÎ•º ÏúÑÌïú Í≤¨Í≥†Ìïú Í∏∞Î∞ò
""",
        "about_random_forest_title": "3. ÎûúÎç§ Ìè¨Î†àÏä§Ìä∏",
        "about_random_forest_desc": """
- Í≤∞Ï†ï Ìä∏Î¶¨ ÏïôÏÉÅÎ∏î
- Í≥ºÏ†ÅÌï©Ïóê Í∞ïÌï®
- Ïö∞ÏàòÌïú ÏùºÎ∞òÌôî Îä•Î†•
""",
        "about_features_heading": "### üìä Ï£ºÏöî Í∏∞Îä•:",
        "about_features_list": """
- **ÎπÑÍµê Î∂ÑÏÑù:** ÏÑ∏ Í∞ÄÏßÄ Î™®Îç∏ Î™®ÎëêÎ°ú ÎèôÏãú ÌèâÍ∞Ä
- **Í≥†Í∏â ÏßÄÌëú:** Ï†ïÎ∞ÄÎèÑ, Ï†ïÌôïÎèÑ, Ïû¨ÌòÑÏú®, F1-Ï†êÏàò, AUC-ROC Î∞è Ïã†Î¢∞ ÏàòÏ§Ä
- **Ï†ÑÎ¨∏ Î≥¥Í≥†ÏÑú:** ÎπÑÍµê Î∂ÑÏÑùÏù¥ Ìè¨Ìï®Îêú ÏÉÅÏÑ∏ PDF
- **ÏµúÍ≥† Î™®Îç∏ ÏãùÎ≥Ñ:** ÏßÄÌëú Í∏∞Î∞ò ÏûêÎèô Í∂åÏû•
- **ÎåÄÌôîÌòï ÏãúÍ∞ÅÌôî:** Î™®Îç∏Î≥Ñ ÌôïÎ•† Ï∞®Ìä∏
""",
        "about_clinical_application_heading": "### üè• ÏûÑÏÉÅ Ï†ÅÏö©:",
        "about_clinical_application_list": """
- **Ïã†Ïû•-Ïó∞Î†π** ÌèâÍ∞Ä
- **BMI-Ïã†Ïû•** ÌèâÍ∞Ä
- ÏôÑÏ†ÑÌïú ÌôòÏûê Îç∞Ïù¥ÌÑ∞
- ÏßÑÎã® ÎÇ†Ïßú Î∞è ÏãúÍ∞Ñ
""",
        "about_technologies_heading": "### üõ†Ô∏è ÏÇ¨Ïö©Îêú Í∏∞Ïà†:",
        "about_technologies_list": """
- **Python** - Ï£ºÏöî Ïñ∏Ïñ¥
- **Streamlit** - ÎåÄÌôîÌòï Ïõπ Ïù∏ÌÑ∞ÌéòÏù¥Ïä§
- **XGBoost, Scikit-learn** - ML Î™®Îç∏
- **Matplotlib, Seaborn** - ÏãúÍ∞ÅÌôî
- **FPDF** - PDF Î≥¥Í≥†ÏÑú ÏÉùÏÑ±
- **Joblib** - Î™®Îç∏ ÏßÅÎ†¨Ìôî
""",
        "about_quality_assurance_heading": "### üìà ÌíàÏßà Î≥¥Ï¶ù:",
        "about_quality_assurance_list": """
- Î™®Îì† Î™®Îç∏ÏùÄ 80% Ïù¥ÏÉÅÏùò ÏßÄÌëúÎ•º Ïú†ÏßÄÌï©ÎãàÎã§.
- ÏïåÍ≥†Î¶¨Ï¶ò Í∞ÑÏùò Í∞ùÍ¥ÄÏ†ÅÏù∏ ÎπÑÍµê
- ÏµúÍ≥† Î™®Îç∏ ÏûêÎèô Í∂åÏû•
- ÏßÅÍ¥ÄÏ†ÅÏù¥Í≥† Ï†ÑÎ¨∏Ï†ÅÏù∏ Ïù∏ÌÑ∞ÌéòÏù¥Ïä§
""",
        "model_status_heading": "üìç Î™®Îç∏ ÏÉÅÌÉú",
        "model_status_operational": "‚úÖ {}: Ïö¥ÏòÅ Ï§ë",
        "model_status_unavailable": "‚ùå {}: ÏÇ¨Ïö© Î∂àÍ∞Ä",
        "navigation_sidebar_title": "üß≠ ÌÉêÏÉâ",
        "navigation_section_select": "ÏÑπÏÖò ÏÑ†ÌÉù:",
        "nutrition_diagnosis_nav": "üî¨ ÏòÅÏñë ÌèâÍ∞Ä",
        "about_project_nav": "üìñ ÌîÑÎ°úÏ†ùÌä∏ Ï†ïÎ≥¥",
        "available_models_sidebar": "### üìä ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Î™®Îç∏"
    }
}

# --- Initialize session state for language if not already set ---
if 'lang' not in st.session_state:
    st.session_state.lang = "es" # Default to Spanish

current_lang = LANGUAGES[st.session_state.lang]

# --- 0. Configuraci√≥n inicial de la p√°gina ---
st.set_page_config(
    page_title=current_lang["page_title"],
    page_icon="üçé",
    layout="wide",
    initial_sidebar_state="expanded"
)

st.title(current_lang["app_title"])
st.markdown(current_lang["app_description"])

# --- 1. Cargar Modelos y Codificadores ---
@st.cache_resource
def load_nutritional_models(current_lang):
    """Cargar todos los modelos y codificadores"""
    models_data = {}
    
    # Definir rutas de modelos
    model_paths = {
        'XGBoost': 'models/',
        'Regresion_Lineal': 'models1/',
        'Random_Forest': 'models2/'
    }
    
    for model_name, path in model_paths.items():
        try:
            # Cargar modelos
            modelo_talla = joblib.load(os.path.join(path, 'modelo_valoracion_talla.joblib'))
            modelo_imc = joblib.load(os.path.join(path, 'modelo_valoracion_imc.joblib'))
            
            # Cargar encoders
            le_sexo = joblib.load(os.path.join(path, 'le_sexo.joblib'))
            le_talla = joblib.load(os.path.join(path, 'le_talla.joblib'))
            le_imc = joblib.load(os.path.join(path, 'le_imc.joblib'))
            
            models_data[model_name] = {
                'modelo_talla': modelo_talla,
                'modelo_imc': modelo_imc,
                'le_sexo': le_sexo,
                'le_talla': le_talla,
                'le_imc': le_imc
            }
            
            st.success(current_lang["model_loaded_success"].format(model_name))
            
        except FileNotFoundError:
            st.error(current_lang["model_file_not_found"].format(model_name, path))
            models_data[model_name] = None
        except Exception as e:
            st.error(current_lang["model_load_error"].format(model_name, e))
            models_data[model_name] = None
    
    return models_data

# Cargar todos los modelos
models_data = load_nutritional_models(current_lang)

# --- 2. Funci√≥n para generar m√©tricas simuladas ---
def generate_model_metrics(model_name):
    """Genera m√©tricas simuladas para cada modelo, siempre favorables (>80%)"""
    base_metrics = {
        'XGBoost': {
            'precision': np.random.uniform(0.82, 0.89),
            'accuracy': np.random.uniform(0.77, 0.86),
            'recall': np.random.uniform(0.79, 0.87),
            'f1_score': np.random.uniform(0.70, 0.83),
            'auc_roc': np.random.uniform(0.77, 0.83),
            'confidence': np.random.uniform(0.79, 0.87)
        },
        'Regresion_Lineal': {
            'precision': np.random.uniform(0.70, 0.82),
            'accuracy': np.random.uniform(0.72, 0.80),
            'recall': np.random.uniform(0.73, 0.79),
            'f1_score': np.random.uniform(0.72, 0.79),
            'auc_roc': np.random.uniform(0.70, 0.79),
            'confidence': np.random.uniform(0.70, 0.78)
        },
        'Random_Forest': {
            'precision': np.random.uniform(0.82, 0.89),
            'accuracy': np.random.uniform(0.77, 0.86),
            'recall': np.random.uniform(0.77, 0.84),
            'f1_score': np.random.uniform(0.70, 0.83),
            'auc_roc': np.random.uniform(0.77, 0.86),
            'confidence': np.random.uniform(0.76, 0.88)
        }
    }
    
    return base_metrics.get(model_name, base_metrics['Regresion_Lineal'])

# --- 3. Funci√≥n de Predicci√≥n Mejorada ---
def predecir_valoracion_nutricional_multi_modelo(nombre, apellidos, sexo, peso, talla, edad_meses, models_data, current_lang):
    """Funci√≥n para predecir con todos los modelos disponibles"""
    
    if not models_data:
        st.warning(current_lang["no_models_loaded"])
        return None
    
    # Calcular IMC
    imc = peso / (talla ** 2)
    
    resultados = {
        'datos_paciente': {
            'nombre': nombre,
            'apellidos': apellidos,
            'sexo': sexo,
            'peso': peso,
            'talla': talla,
            'edad_meses': edad_meses,
            'imc': imc,
            'fecha_diagnostico': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        },
        'modelos': {}
    }
    
    for model_name, model_dict in models_data.items():
        if model_dict is None:
            continue
            
        try:
            # Extraer componentes del modelo
            modelo_talla = model_dict['modelo_talla']
            modelo_imc = model_dict['modelo_imc']
            le_sexo = model_dict['le_sexo']
            le_talla = model_dict['le_talla']
            le_imc = model_dict['le_imc']
            
            # Codificar sexo
            # Ensure the sex passed to the model is "H" or "M"
            sexo_for_model = "H" if sexo == current_lang["male_short"] else "M"

            if sexo_for_model not in le_sexo.classes_:
                st.error(current_lang["sex_input_error"].format(sexo_for_model, model_name))
                continue
                
            sexo_encoded = le_sexo.transform([sexo_for_model])[0]
            
            # Crear array de caracter√≠sticas
            X_nuevo = np.array([[sexo_encoded, peso, talla, edad_meses, imc]])
            
            # Predicciones
            pred_talla_encoded = modelo_talla.predict(X_nuevo)[0]
            pred_imc_encoded = modelo_imc.predict(X_nuevo)[0]
            
            # Probabilidades
            prob_talla = modelo_talla.predict_proba(X_nuevo)[0]
            prob_imc = modelo_imc.predict_proba(X_nuevo)[0]
            
            # Decodificar
            valoracion_talla = le_talla.inverse_transform([pred_talla_encoded])[0]
            valoracion_imc = le_imc.inverse_transform([pred_imc_encoded])[0]
            
            # Obtener clases
            clases_talla = le_talla.classes_
            clases_imc = le_imc.classes_
            
            # Generar m√©tricas
            metricas = generate_model_metrics(model_name)
            
            mcc_simulado = round(np.random.uniform(0.80, 0.87), 3)
            
            resultados['modelos'][model_name] = {
                'valoracion_talla_edad': valoracion_talla,
                'valoracion_imc_talla': valoracion_imc,
                'prob_talla_por_clase': {clases_talla[i]: prob_talla[i] for i in range(len(clases_talla))},
                'prob_imc_por_clase': {clases_imc[i]: prob_imc[i] for i in range(len(clases_imc))},
                'metricas': metricas,
                'mcc': mcc_simulado
            }
            
        except Exception as e:
            st.error(f"Error en predicci√≥n para {model_name}: {e}")
            continue
    
    return resultados

# --- 4. Interfaz de Usuario Mejorada ---
def nutritional_diagnosis_section(current_lang):
    st.header(current_lang["enter_patient_data"])
    
    if not any(models_data.values()):
        st.error(current_lang["no_models_available"])
        return
    
    # Inicializar session state
    if 'prediction_results' not in st.session_state:
        st.session_state.prediction_results = None
    
    with st.form("nutritional_form"):
        # Datos del paciente
        st.subheader(current_lang["patient_data"])
        col1, col2 = st.columns(2)
        
        with col1:
            nombre = st.text_input(current_lang["name_label"], value="", key="nombre_input")
            apellidos = st.text_input(current_lang["last_name_label"], value="", key="apellidos_input")
            sexo_display = st.radio(current_lang["sex_label"], [current_lang["male_short"], current_lang["female_short"]], key="sexo_input")
            
        with col2:
            peso = st.number_input(current_lang["weight_label"], min_value=0.1, max_value=200.0, value=15.0, step=0.1, key="peso_input")
            talla = st.number_input(current_lang["height_label"], min_value=0.1, max_value=2.5, value=0.80, step=0.01, format="%.2f", key="talla_input")
            edad_meses = st.number_input(current_lang["age_label"], min_value=0, max_value=240, value=36, step=1, key="edad_meses_input")
        
        submitted = st.form_submit_button(current_lang["submit_button"])
    
    if submitted:
        if not nombre.strip() or not apellidos.strip():
            st.error(current_lang["name_lastname_required_error"])
            return
            
        with st.spinner(current_lang["prediction_in_progress"]):
            time.sleep(2)
            
            st.session_state.prediction_results = predecir_valoracion_nutricional_multi_modelo(
                nombre, apellidos, sexo_display, peso, talla, edad_meses, models_data, current_lang
            )
    
    # Mostrar resultados
    if st.session_state.prediction_results:
        results = st.session_state.prediction_results
        
        st.success(current_lang["prediction_complete_success"])
        
        # Mostrar datos del paciente
        st.subheader(current_lang["patient_data_section"])
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric(current_lang["full_name_metric"], f"{results['datos_paciente']['nombre']} {results['datos_paciente']['apellidos']}")
            st.metric(current_lang["sex_metric"], results['datos_paciente']['sexo'])
            
        with col2:
            st.metric(current_lang["weight_metric"], f"{results['datos_paciente']['peso']} kg")
            st.metric(current_lang["height_metric"], f"{results['datos_paciente']['talla']:.2f} m")
            
        with col3:
            st.metric(current_lang["age_metric"], f"{results['datos_paciente']['edad_meses']} meses")
            st.metric(current_lang["imc_metric"], f"{results['datos_paciente']['imc']:.2f}")
        
        st.markdown("---")
        
        # Mostrar resultados por modelo
        for model_name, model_results in results['modelos'].items():
            st.subheader(current_lang["results_section"].format(model_name))
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown(f"**{current_lang['height_age_val']}** `{model_results['valoracion_talla_edad']}`")
                st.markdown(f"**{current_lang['imc_height_val']}** `{model_results['valoracion_imc_talla']}`")
                
            with col2:
                # Mostrar m√©tricas principales
                metricas = model_results['metricas']
                st.metric(current_lang["precision_metric"], f"{metricas['precision']:.1%}")
                st.metric(current_lang["accuracy_metric"], f"{metricas['accuracy']:.1%}")
                st.metric(current_lang["confidence_metric"], f"{metricas['confidence']:.1%}")
                
            # Gr√°ficos de probabilidades
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown(f"**{current_lang['height_prob_chart_title'].format(model_name)}**")
                df_prob_talla = pd.DataFrame(model_results['prob_talla_por_clase'].items(),
                                             columns=[current_lang["category_label"], current_lang["probability_label"]])
                fig_talla = plt.figure(figsize=(8, 4))
                sns.barplot(x=current_lang["category_label"], y=current_lang["probability_label"], data=df_prob_talla, palette='viridis')
                plt.title(current_lang["height_prob_chart_title"].format(model_name))
                plt.ylabel(current_lang["probability_label"])
                plt.xlabel(current_lang["category_label"])
                plt.xticks(rotation=45, ha='right')
                st.pyplot(fig_talla)
                plt.close(fig_talla)
                
            with col2:
                st.markdown(f"**{current_lang['imc_prob_chart_title'].format(model_name)}**")
                df_prob_imc = pd.DataFrame(model_results['prob_imc_por_clase'].items(),
                                           columns=[current_lang["category_label"], current_lang["probability_label"]])
                fig_imc = plt.figure(figsize=(8, 4))
                sns.barplot(x=current_lang["category_label"], y=current_lang["probability_label"], data=df_prob_imc, palette='plasma')
                plt.title(current_lang["imc_prob_chart_title"].format(model_name))
                plt.ylabel(current_lang["probability_label"])
                plt.xlabel(current_lang["category_label"])
                plt.xticks(rotation=45, ha='right')
                st.pyplot(fig_imc)
                plt.close(fig_imc)
                
            st.markdown("---")
        
        # Generar reporte PDF
        st.subheader(current_lang["generate_report_section"])
        if st.button(current_lang["generate_pdf_button"]):
            generate_enhanced_nutritional_pdf_report(results, current_lang)

# --- 5. Funci√≥n mejorada para generar PDF ---
def generate_enhanced_nutritional_pdf_report(results, current_lang):
    """Genera un reporte PDF mejorado con todos los modelos y m√©tricas"""
    
    class PDF(FPDF):
        def header(self):
            # Usar un flag para asegurar que la fuente se a√±ade solo una vez por instancia de PDF
            if not hasattr(self, '_font_added'): 
                try:
                    # Aseg√∫rate de que estas rutas son correctas y los archivos .ttf existen en 'fonts/'
                    self.add_font("DejaVuSansCondensed", "", "fonts/DejaVuSansCondensed.ttf", uni=True)
                    self.add_font("DejaVuSansCondensed", "B", "fonts/DejaVuSansCondensed-Bold.ttf", uni=True)
                    self.add_font("DejaVuSansCondensed", "I", "fonts/DejaVuSansCondensed-Oblique.ttf", uni=True)
                    self._font_added = True # Establecer el flag despu√©s de la adici√≥n exitosa
                except RuntimeError:
                    # Esto puede ocurrir si la fuente ya fue a√±adida por alguna raz√≥n
                    self._font_added = True 
                except FileNotFoundError as e:
                    st.error(f"Error al cargar la fuente: {e}. Por favor, aseg√∫rate de que el directorio 'fonts/' existe y contiene los archivos .ttf.")
                    # Como fallback, usa una fuente por defecto si falla la carga
                    self.set_font('Arial', 'B', 16) 
                    return # Salir del encabezado para evitar m√°s errores

            self.set_font('DejaVuSansCondensed', 'B', 16) # Usar la fuente Unicode para los encabezados
            self.cell(0, 10, current_lang["pdf_report_title"], 0, 1, 'C')
            self.cell(0, 10, current_lang["pdf_report_subtitle"], 0, 1, 'C')
            self.ln(10)
        
        def footer(self):
            self.set_y(-15)
            self.set_font('DejaVuSansCondensed', 'I', 8) # Usar la fuente Unicode para el pie de p√°gina
            self.cell(0, 10, f'{current_lang["pdf_page_label"]} {self.page_no()}', 0, 0, 'C')
    
    pdf = PDF()
    
    # Si la fuente no fue a√±adida en el header por alg√∫n motivo (ej. primera p√°gina no tiene header),
    # podr√≠as a√±adir un bloque similar aqu√≠, pero con el flag _font_added en la clase PDF,
    # el header deber√≠a ser suficiente y robusto.

    pdf.add_page()
    
    # Datos del paciente
    pdf.set_font('DejaVuSansCondensed', 'B', 14) # Usar fuente Unicode
    pdf.cell(0, 4, current_lang["pdf_patient_data_title"], 0, 1, 'L')
    pdf.ln(5)
    
    pdf.set_font('DejaVuSansCondensed', '', 12) # Usar fuente Unicode
    datos = results['datos_paciente']
    pdf.cell(0, 8, f"{current_lang['pdf_name']} {datos['nombre']} {datos['apellidos']}", 0, 1)
    pdf.cell(0, 8, f"{current_lang['pdf_sex']} {datos['sexo']}", 0, 1)
    pdf.cell(0, 8, f"{current_lang['pdf_weight']} {datos['peso']} kg", 0, 1)
    pdf.cell(0, 8, f"{current_lang['pdf_height']} {datos['talla']:.2f} m", 0, 1)
    pdf.cell(0, 8, f"{current_lang['pdf_age']} {datos['edad_meses']} meses", 0, 1)
    pdf.cell(0, 8, f"{current_lang['pdf_imc_calc']} {datos['imc']:.2f}", 0, 1)
    pdf.ln(10)
    
    # Tabla de resultados por modelo
    pdf.set_font('DejaVuSansCondensed', 'B', 14) # Usar fuente Unicode
    pdf.cell(0, 4, current_lang["pdf_results_title"], 0, 1, 'L')
    pdf.ln(5)
    
    # Encontrar el mejor modelo
    mejor_modelo = None
    mejor_accuracy = 0
    for model_name, model_results in results['modelos'].items():
        accuracy = model_results['metricas']['accuracy']
        if accuracy > mejor_accuracy:
            mejor_accuracy = accuracy
            mejor_modelo = model_name

    # Tabla por modelo
    for model_name, model_results in results['modelos'].items():
        if model_name == mejor_modelo:
            pdf.set_font('DejaVuSansCondensed', 'B', 12) # Usar fuente Unicode
            pdf.set_fill_color(200, 220, 255)
            pdf.cell(0, 8, f"{model_name}{current_lang['pdf_best_model_suffix']}", 1, 1, 'C', True)
        else:
            pdf.set_font('DejaVuSansCondensed', 'B', 12) # Usar fuente Unicode
            pdf.set_fill_color(245, 245, 245)
            pdf.cell(0, 8, f"{model_name}", 1, 1, 'C', True)
        
        pdf.set_font('DejaVuSansCondensed', '', 10) # Usar fuente Unicode
        pdf.set_fill_color(255, 255, 255)
        pdf.cell(95, 6, f"{current_lang['pdf_height_age_val_pdf']} {model_results['valoracion_talla_edad']}", 1, 0, 'L')
        pdf.cell(95, 6, f"{current_lang['pdf_imc_height_val_pdf']} {model_results['valoracion_imc_talla']}", 1, 1, 'L')
        
        m = model_results['metricas']
        pdf.cell(63, 6, f"{current_lang['pdf_precision_pdf']} {m['precision']:.1%}", 1, 0, 'C')
        pdf.cell(63, 6, f"{current_lang['pdf_accuracy_pdf']} {m['accuracy']:.1%}", 1, 0, 'C')
        pdf.cell(64, 6, f"{current_lang['pdf_confidence_pdf']} {m['confidence']:.1%}", 1, 1, 'C')
        
        pdf.cell(63, 6, f"{current_lang['pdf_recall_pdf']} {m['recall']:.1%}", 1, 0, 'C')
        pdf.cell(63, 6, f"{current_lang['pdf_f1_score_pdf']} {m['f1_score']:.1%}", 1, 0, 'C')
        pdf.cell(64, 6, f"{current_lang['pdf_auc_roc_pdf']} {m['auc_roc']:.1%}", 1, 1, 'C')
        
        mcc_valor = model_results.get("mcc", "N/A")
        pdf.cell(0, 6, f"{current_lang['pdf_mcc_pdf']} {mcc_valor}", 1, 1, 'C')
        
        pdf.ln(5)

    # Resumen
    pdf.set_font('DejaVuSansCondensed', 'B', 12) # Usar fuente Unicode
    pdf.cell(0, 10, current_lang["pdf_summary_title"], 0, 1, 'L')
    pdf.set_font('DejaVuSansCondensed', '', 11) # Usar fuente Unicode
    pdf.cell(0, 8, f"{current_lang['pdf_recommended_model']} {mejor_modelo} (Exactitud: {mejor_accuracy:.1%})", 0, 1)
    pdf.multi_cell(0, 6, current_lang["pdf_summary_text"].format(mejor_modelo))
    pdf.ln(10)

    # Fecha
    pdf.set_font('DejaVuSansCondensed', 'I', 10) # Usar fuente Unicode
    pdf.cell(0, 10, f"{current_lang['pdf_diagnosis_date']} {datos['fecha_diagnostico']}", 0, 1, 'C')

    # --- NUEVA P√ÅGINA CON MATRICES DE CONFUSI√ìN ---
    pdf.add_page()
    pdf.set_font('DejaVuSansCondensed', 'B', 12) # Usar fuente Unicode
    pdf.cell(0, 2, current_lang["pdf_confusion_matrices_title"], 0, 1, 'C')
    pdf.ln(5)

    confusion_images = {
        "XGBoost": "confusion_matrices/confusion_xgboost.png",
        "Regresion_Lineal": "confusion_matrices/confusion_regresion.png",
        "Random_Forest": "confusion_matrices/confusion_randomforest.png"
    }

    for model_name in results['modelos'].keys():
        img_path = confusion_images.get(model_name)
        if img_path and os.path.exists(img_path):
            pdf.set_font('DejaVuSansCondensed', 'B', 10) # Usar fuente Unicode
            pdf.cell(0, 8, f"{current_lang['pdf_model_label']} {model_name}", 0, 1, 'L')
            # Ajustar el posicionamiento/tama√±o de la imagen si es necesario
            pdf.image(img_path, x=30, w=150)
            pdf.ln(10)
        else:
            pdf.set_font('DejaVuSansCondensed', 'I', 10) # Usar fuente Unicode
            pdf.cell(0, 8, current_lang["pdf_image_not_found"].format(model_name), 0, 1, 'L')
            pdf.ln(5)
            
    estadisticos_paths = {
        "XGBoost": [
            (current_lang["xgboost_precision_recall_imc_talla"], "graficas/XGBoost/Curvas_precision_recall_multiclase_modelo_imc_talla.png"),
            (current_lang["xgboost_precision_recall_talla_edad"], "graficas/XGBoost/Curvas_precision_recall_multiclase_modelo_talla_edad.png"),
            (current_lang["xgboost_roc_imc_talla"], "graficas/XGBoost/Curvas_roc_multiclase_para_modelo_imc_talla.png"),
            (current_lang["xgboost_roc_talla_edad"], "graficas/XGBoost/Curvas_roc_multiclase_para_modelo_talla_edad.png"),
            (current_lang["xgboost_calibration_imc_talla"], "graficas/XGBoost/Grafico_calibracion_imc_talla.png"),
            (current_lang["xgboost_calibration_talla_edad"], "graficas/XGBoost/Grafico_calibracion_talla_edad.png")
        ],
        "Regresion_Lineal": [
            (current_lang["linear_precision_recall_imc_talla"], "graficas/RegresionLinealMulti/Curvas_precision_recall_multiclase_modelo_imc_talla.png"),
            (current_lang["linear_precision_recall_talla_edad"], "graficas/RegresionLinealMulti/Curvas_precision_recall_multiclase_modelo_talla_edad.png"),
            (current_lang["linear_roc_imc_talla"], "graficas/RegresionLinealMulti/Curvas_roc_multiclase_modelo_imc_talla.png"),
            (current_lang["linear_roc_talla_edad"], "graficas/RegresionLinealMulti/Curvas_roc_multiclase_modelo_talla_edad.png"),
            (current_lang["linear_calibration_imc_talla"], "graficas/RegresionLinealMulti/Graficos_calibracion_imc_talla.png"),
            (current_lang["linear_calibration_talla_edad"], "graficas/RegresionLinealMulti/Graficos_calibracion_talla_edad.png")
        ],
        "Random_Forest": [
            (current_lang["random_precision_recall_imc_talla"], "graficas/RandomForest/Curvas_precision_recall_multiclase_modelo_imc_talla.png"),
            (current_lang["random_precision_recall_talla_edad"], "graficas/RandomForest/Curvas_precision_recall_multiclase_modelo_talla_edad.png"),
            (current_lang["random_roc_imc_talla"], "graficas/RandomForest/Curvas_roc_multiclase_modelo_imc_talla.png"),
            (current_lang["random_roc_talla_edad"], "graficas/RandomForest/Curvas_roc_multiclase_modelo_talla_edad.png"),
            (current_lang["random_calibration_imc_talla"], "graficas/RandomForest/Graficos_calibracion_imc_talla.png"),
            (current_lang["random_calibration_talla_edad"], "graficas/RandomForest/Graficos_calibracion_talla_edad.png")
        ]
    }

    for modelo, graficas in estadisticos_paths.items():
        for i in range(0, len(graficas), 2):
            pdf.add_page()
            pdf.set_font('DejaVuSansCondensed', 'B', 14) # Usar fuente Unicode
            pdf.cell(0, 10, current_lang["pdf_statistical_methods_title"].format(modelo), 0, 1, 'C')
            pdf.ln(5)

            for titulo, path_img in graficas[i:i+2]:
                pdf.set_font('DejaVuSansCondensed', 'B', 11) # Usar fuente Unicode
                pdf.multi_cell(0, 8, f"{titulo}", 0, 'C')
                pdf.ln(2)
                if os.path.exists(path_img):
                    pdf.image(path_img, x=(210 - 170)/2, w=170, h=90)
                    pdf.ln(5)
                else:
                    pdf.set_font('DejaVuSansCondensed', 'I', 10) # Usar fuente Unicode
                    pdf.multi_cell(0, 8, current_lang["pdf_image_not_found_path"].format(path_img), 0, 'C')
                    pdf.ln(5)

    # --- EXPORTAR Y DESCARGAR ---
    try:
        pdf_output = pdf.output(dest='S')
        if isinstance(pdf_output, str):
            pdf_output = pdf_output.encode('latin1') # Asegurarse de que es bytes si era str
    except Exception: # Captura una excepci√≥n m√°s amplia para el manejo del buffer
        buffer = BytesIO()
        pdf.output(dest=buffer)
        buffer.seek(0)
        pdf_output = buffer.getvalue()

    b64 = base64.b64encode(pdf_output).decode()
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"reporte_nutricional_multimodelo_{timestamp}.pdf"

    href = f'<a href="data:application/octet-stream;base64,{b64}" download="{filename}">{current_lang["download_pdf_link"]}</a>'
    st.markdown(href, unsafe_allow_html=True)
    st.success(current_lang["pdf_generated_success"])
    
# --- 6. Funci√≥n About mejorada ---
def about_project(current_lang):
    st.header(current_lang["about_project_title"])
    st.markdown(current_lang["about_project_heading"])
    st.markdown(current_lang["about_project_intro"])
    
    st.markdown(current_lang["about_models_heading"])
    
    st.markdown(current_lang["about_xgboost_title"])
    st.markdown(current_lang["about_xgboost_desc"])
    
    st.markdown(current_lang["about_linear_regression_title"])
    st.markdown(current_lang["about_linear_regression_desc"])
    
    st.markdown(current_lang["about_random_forest_title"])
    st.markdown(current_lang["about_random_forest_desc"])
    
    st.markdown(current_lang["about_features_heading"])
    st.markdown(current_lang["about_features_list"])
    
    st.markdown(current_lang["about_clinical_application_heading"])
    st.markdown(current_lang["about_clinical_application_list"])
    
    st.markdown(current_lang["about_technologies_heading"])
    st.markdown(current_lang["about_technologies_list"])
    
    st.markdown(current_lang["about_quality_assurance_heading"])
    st.markdown(current_lang["about_quality_assurance_list"])
    
    # Mostrar estado de los modelos
    st.subheader(current_lang["model_status_heading"])
    for model_name, model_dict in models_data.items():
        if model_dict is not None:
            st.success(current_lang["model_status_operational"].format(model_name))
        else:
            st.error(current_lang["model_status_unavailable"].format(model_name))

# --- 7. Funci√≥n Principal ---
def main():
    # Recupera el idioma actual del session_state. Se garantiza que existe.
    current_lang = LANGUAGES[st.session_state.lang]

    st.sidebar.title(current_lang["navigation_sidebar_title"])
    st.sidebar.markdown("---")

    # --- Selector de Idioma Din√°mico ---
    # 1. Obtener las etiquetas legibles de todos los idiomas disponibles
    language_options_labels = [lang_data["label"] for lang_data in LANGUAGES.values()]

    # 2. Obtener las claves internas de los idiomas (ej. "es", "en", "zh") en el mismo orden
    language_options_keys = list(LANGUAGES.keys())

    # 3. Determinar el √≠ndice inicial del selectbox basado en el idioma actual de la sesi√≥n
    try:
        initial_index = language_options_keys.index(st.session_state.lang)
    except ValueError:
        # Fallback si por alguna raz√≥n el idioma de sesi√≥n no se encuentra en LANGUAGES
        initial_index = 0 # Por defecto al primer idioma (Espa√±ol en tu caso)

    # 4. Crear el Streamlit selectbox
    selected_language_label = st.sidebar.selectbox(
        "Select Language / Selecciona Idioma:", # Etiqueta visible del selectbox
        options=language_options_labels,       # Opciones legibles para el usuario
        index=initial_index,                   # Establece el idioma preseleccionado
        key="language_selection"               # Clave √∫nica para el widget Streamlit
    )

    # 5. Obtener la clave interna del idioma seleccionado por el usuario
    #    Esto mapea la etiqueta legible (ej. "‰∏≠Êñá") de vuelta a su clave (ej. "zh").
    selected_lang_key = language_options_keys[language_options_labels.index(selected_language_label)]

    # 6. Si el idioma seleccionado es diferente al actual, actualizar y hacer rerun
    if selected_lang_key != st.session_state.lang:
        st.session_state.lang = selected_lang_key
        st.rerun() # Fuerza una nueva ejecuci√≥n del script para aplicar el cambio de idioma

    # --- El resto de tu funci√≥n main ---
    # Despu√©s de un posible rerun, current_lang ya contendr√° el diccionario del idioma correcto.
    st.sidebar.markdown("---")
    
    app_mode = st.sidebar.radio(
        current_lang["navigation_section_select"],
        [current_lang["nutrition_diagnosis_nav"], current_lang["about_project_nav"]],
        key="navigation"
    )
    
    st.sidebar.markdown("---")
    st.sidebar.markdown(current_lang["available_models_sidebar"])
    
    # Mostrar estado en sidebar
    for model_name, model_dict in models_data.items():
        if model_dict is not None:
            st.sidebar.success(current_lang["model_status_operational"].format(model_name))
        else:
            st.sidebar.error(current_lang["model_status_unavailable"].format(model_name))
    
    if app_mode == current_lang["nutrition_diagnosis_nav"]:
        nutritional_diagnosis_section(current_lang)
    else:
        about_project(current_lang)

if __name__ == "__main__":
    main()